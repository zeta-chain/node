package keeper

import (
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"math/big"
	"strconv"

	cosmoserrors "cosmossdk.io/errors"
	tmbytes "github.com/cometbft/cometbft/libs/bytes"
	tmtypes "github.com/cometbft/cometbft/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core"
	ethtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	evmtypes "github.com/zeta-chain/ethermint/x/evm/types"
	"github.com/zeta-chain/protocol-contracts/v1/pkg/contracts/zevm/systemcontract.sol"
	"github.com/zeta-chain/protocol-contracts/v1/pkg/contracts/zevm/wzeta.sol"
	zevmconnectorcontract "github.com/zeta-chain/protocol-contracts/v1/pkg/contracts/zevm/zetaconnectorzevm.sol"
	"github.com/zeta-chain/protocol-contracts/v1/pkg/uniswap/v2-core/contracts/uniswapv2factory.sol"
	"github.com/zeta-chain/protocol-contracts/v1/pkg/uniswap/v2-periphery/contracts/uniswapv2router02.sol"
	"github.com/zeta-chain/protocol-contracts/v2/pkg/zrc20.sol"

	"github.com/zeta-chain/node/pkg/chains"
	"github.com/zeta-chain/node/pkg/coin"
	"github.com/zeta-chain/node/server/config"
	"github.com/zeta-chain/node/x/fungible/types"
	observertypes "github.com/zeta-chain/node/x/observer/types"
)

var (
	BigIntZero                 = big.NewInt(0)
	ZEVMGasLimitDepositAndCall = big.NewInt(1_000_000)
	ZEVMGasLimitConnectorCall  = big.NewInt(1_000_000)
)

// DeployContract deploys a new contract in the ZEVM
func (k Keeper) DeployContract(
	ctx sdk.Context,
	metadata *bind.MetaData,
	constructorArguments ...interface{},
) (common.Address, error) {
	contractABI, err := metadata.GetAbi()
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(types.ErrABIGet, "failed to get  ABI: %s", err.Error())
	}
	constructorArgumentsPacked, err := contractABI.Pack(
		"",                      // function--empty string for constructor
		constructorArguments..., // feeToSetter
	)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(
			types.ErrABIGet,
			"failed to abi.Pack ctor arguments: %s",
			err.Error(),
		)
	}

	if len(metadata.Bin) <= 2 {
		return common.Address{}, cosmoserrors.Wrapf(types.ErrABIGet, "metadata Bin field too short")
	}

	bin, err := hex.DecodeString(metadata.Bin[2:])
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(
			types.ErrABIPack,
			"error decoding %s hex bytecode string: %s",
			metadata.Bin[2:],
			err.Error(),
		)
	}

	data := make([]byte, len(bin)+len(constructorArgumentsPacked))
	copy(data[:len(bin)], bin)
	copy(data[len(bin):], constructorArgumentsPacked)

	nonce, err := k.authKeeper.GetSequence(ctx, types.ModuleAddress.Bytes())
	if err != nil {
		return common.Address{}, err
	}

	contractAddr := crypto.CreateAddress(types.ModuleAddressEVM, nonce)
	_, err = k.CallEVMWithData(ctx, types.ModuleAddressEVM, nil, data, true, false, BigIntZero, nil)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(err, "failed to deploy contract")
	}

	return contractAddr, nil
}

// DeployZRC20Contract creates and deploys an ERC20 contract on the EVM with the
// erc20 module account as owner. Also adds itself to ForeignCoins fungible module state variable
func (k Keeper) DeployZRC20Contract(
	ctx sdk.Context,
	name, symbol string,
	decimals uint8,
	chainID int64,
	coinType coin.CoinType,
	erc20Contract string,
	gasLimit *big.Int,
) (common.Address, error) {
	chain, found := chains.GetChainFromChainID(chainID, k.GetAuthorityKeeper().GetAdditionalChainList(ctx))
	if !found {
		return common.Address{}, cosmoserrors.Wrapf(observertypes.ErrSupportedChains, "chain %d not found", chainID)
	}

	// Check if Contract has already been deployed for Asset
	_, found = k.GetForeignCoinFromAsset(ctx, erc20Contract, chainID)
	if found {
		return common.Address{}, types.ErrForeignCoinAlreadyExist
	}

	system, found := k.GetSystemContract(ctx)
	if !found {
		return common.Address{}, cosmoserrors.Wrapf(types.ErrSystemContractNotFound, "system contract not found")
	}

	// deployment fails if gateway is zero address
	// if the gateway is not defined in the protocol yet, use the system contract as the gateway
	gateway := system.Gateway
	if gateway == "" {
		gateway = system.SystemContract
	}

	contractAddr, err := k.DeployContract(
		ctx,
		zrc20.ZRC20MetaData,
		name,                      // name
		symbol,                    // symbol
		decimals,                  // decimals
		big.NewInt(chain.ChainId), // chainID
		// #nosec G115 always in range
		uint8(coinType), // coinType: 0: Zeta 1: gas 2 ERC20
		gasLimit,        //gas limit for transfer; 21k for gas asset; around 70k for ERC20
		common.HexToAddress(system.SystemContract),
		common.HexToAddress(gateway),
	)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(
			types.ErrABIPack,
			"failed to deploy ZRC20 contract: %s, %s",
			name,
			err.Error(),
		)
	}

	// create and set in the store the new foreign coin object
	newCoin, _ := k.GetForeignCoins(ctx, contractAddr.Hex())
	newCoin.CoinType = coinType
	newCoin.Name = name
	newCoin.Symbol = symbol
	// #nosec G115 uint8 -> uint32 false positive
	newCoin.Decimals = uint32(decimals)
	newCoin.Asset = erc20Contract
	newCoin.Zrc20ContractAddress = contractAddr.Hex()
	newCoin.ForeignChainId = chain.ChainId
	newCoin.GasLimit = gasLimit.Uint64()
	newCoin.LiquidityCap = sdk.NewUint(types.DefaultLiquidityCap).MulUint64(uint64(newCoin.Decimals))
	k.SetForeignCoins(ctx, newCoin)

	return contractAddr, nil
}

func (k Keeper) DeploySystemContract(
	ctx sdk.Context,
	wzeta common.Address,
	v2factory common.Address,
	router02 common.Address,
) (common.Address, error) {
	system, _ := k.GetSystemContract(ctx)

	contractAddr, err := k.DeployContract(ctx, systemcontract.SystemContractMetaData, wzeta, v2factory, router02)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(err, "failed to deploy SystemContract")
	}

	system.SystemContract = contractAddr.String()
	k.SetSystemContract(ctx, system)

	return contractAddr, nil
}

func (k Keeper) DeployUniswapV2Factory(ctx sdk.Context) (common.Address, error) {
	// this comes from Ethereum UniswapV2Factory bytecode
	// https://etherscan.io/address/0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f#code
	refFactoryBytecode := ""
	uniswapv2factory.UniswapV2FactoryMetaData.Bin = refFactoryBytecode
	contractAddr, err := k.DeployContract(ctx, uniswapv2factory.UniswapV2FactoryMetaData, types.ModuleAddressEVM)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(err, "UniswapV2FactoryContract")
	}

	return contractAddr, nil
}

func (k Keeper) DeployUniswapV2Router02(
	ctx sdk.Context,
	factory common.Address,
	wzeta common.Address,
) (common.Address, error) {
	contractAddr, err := k.DeployContract(ctx, uniswapv2router02.UniswapV2Router02MetaData, factory, wzeta)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(err, "UniswapV2Router02")
	}
	return contractAddr, nil
}

func (k Keeper) DeployWZETA(ctx sdk.Context) (common.Address, error) {
	contractAddr, err := k.DeployContract(ctx, wzeta.WETH9MetaData)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(err, "WZETA")
	}
	return contractAddr, nil
}

func (k Keeper) DeployConnectorZEVM(ctx sdk.Context, wzeta common.Address) (common.Address, error) {
	contractAddr, err := k.DeployContract(ctx, zevmconnectorcontract.ZetaConnectorZEVMMetaData, wzeta)
	if err != nil {
		return common.Address{}, cosmoserrors.Wrapf(err, "ZetaConnectorZEVM")
	}
	system, _ := k.GetSystemContract(ctx)
	system.ConnectorZevm = contractAddr.Hex()
	k.SetSystemContract(ctx, system)

	return contractAddr, nil
}

// DepositZRC20 deposits ZRC4 tokens into to account;
// Callable only by the fungible module account
// returns directly CallEVM()
func (k Keeper) DepositZRC20(
	ctx sdk.Context,
	contract common.Address,
	to common.Address,
	amount *big.Int,
) (*evmtypes.MsgEthereumTxResponse, error) {
	zrc20ABI, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return k.CallEVM(
		ctx,
		*zrc20ABI,
		types.ModuleAddressEVM,
		contract,
		BigIntZero,
		nil,
		true,
		false,
		"deposit",
		to,
		amount,
	)
}

// UpdateZRC20ProtocolFlatFee updates the protocol flat fee for a given ZRC20 contract
func (k Keeper) UpdateZRC20ProtocolFlatFee(
	ctx sdk.Context,
	zrc20Addr common.Address,
	newFee *big.Int,
) (*evmtypes.MsgEthereumTxResponse, error) {
	zrc20ABI, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return k.CallEVM(
		ctx,
		*zrc20ABI,
		types.ModuleAddressEVM,
		zrc20Addr,
		BigIntZero,
		nil,
		true,
		false,
		"updateProtocolFlatFee",
		newFee,
	)
}

// UpdateZRC20GasLimit updates the gas limit for a given ZRC20 contract
func (k Keeper) UpdateZRC20GasLimit(
	ctx sdk.Context,
	zrc20Addr common.Address,
	newGasLimit *big.Int,
) (*evmtypes.MsgEthereumTxResponse, error) {
	zrc20ABI, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return k.CallEVM(
		ctx,
		*zrc20ABI,
		types.ModuleAddressEVM,
		zrc20Addr,
		BigIntZero,
		nil,
		true,
		false,
		"updateGasLimit",
		newGasLimit,
	)
}

// DepositZRC20AndCallContract deposits into ZRC4 and call contract function in a single tx
// callable from fungible module
// Returns directly results from CallEVM
func (k Keeper) DepositZRC20AndCallContract(ctx sdk.Context,
	context systemcontract.ZContext,
	zrc20Addr common.Address,
	targetContract common.Address,
	amount *big.Int,
	message []byte,
) (*evmtypes.MsgEthereumTxResponse, error) {
	system, found := k.GetSystemContract(ctx)
	if !found {
		return nil, cosmoserrors.Wrapf(types.ErrContractNotFound, "GetSystemContract address not found")
	}
	systemAddress := common.HexToAddress(system.SystemContract)

	sysConABI, err := systemcontract.SystemContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}

	return k.CallEVM(
		ctx,
		*sysConABI,
		types.ModuleAddressEVM,
		systemAddress,
		BigIntZero,
		ZEVMGasLimitDepositAndCall,
		true,
		false,
		"depositAndCall",
		context,
		zrc20Addr,
		amount,
		targetContract,
		message,
	)
}

// CallOnReceiveZevmConnector calls the onReceive function of the ZevmConnector contract
// Before calling it mints the zetaValue tokens to the fungible module , and this amount is then provided as value to the onReceive function
// The onReceive function will then wrap this native zeta into WZETA and call the onReceive function of the destination contract specified by the destinationAddress
func (k Keeper) CallOnReceiveZevmConnector(ctx sdk.Context,
	zetaTxSenderAddress []byte,
	sourceChainID *big.Int,
	destinationAddress common.Address,
	zetaValue *big.Int,
	message []byte,
	internalSendHash [32]byte,
) (*evmtypes.MsgEthereumTxResponse, error) {
	system, found := k.GetSystemContract(ctx)
	if !found {
		return nil, cosmoserrors.Wrapf(types.ErrContractNotFound, "GetSystemContract address not found")
	}
	connectorAddress := common.HexToAddress(system.ConnectorZevm)

	zevmConnectorAbi, err := zevmconnectorcontract.ZetaConnectorZEVMMetaData.GetAbi()
	if err != nil {
		return nil, err
	}

	err = k.DepositCoinsToFungibleModule(ctx, zetaValue)
	if err != nil {
		return nil, err
	}

	return k.CallEVM(
		ctx,
		*zevmConnectorAbi,
		types.ModuleAddressEVM,
		connectorAddress,
		zetaValue,
		ZEVMGasLimitConnectorCall,
		true,
		false,
		"onReceive",
		zetaTxSenderAddress,
		sourceChainID,
		destinationAddress,
		zetaValue,
		message,
		internalSendHash,
	)
}

// CallOnRevertZevmConnector calls the onRevert function of the ZevmConnector contract
// Before calling it mints the remainingZetaValue tokens to the fungible module , and this amount is then provided as value to the onRevert function
// The onRevert function will then wrap this native zeta into WZETA and call the onRevert function of the contract specified by the zetaTxSenderAddress
// Note the destination address is the original destination address of the transaction and not the current destination .
func (k Keeper) CallOnRevertZevmConnector(ctx sdk.Context,
	zetaTxSenderAddress common.Address,
	sourceChainID *big.Int,
	destinationAddress []byte,
	destinationChainID *big.Int,
	remainingZetaValue *big.Int,
	message []byte,
	internalSendHash [32]byte,
) (*evmtypes.MsgEthereumTxResponse, error) {
	system, found := k.GetSystemContract(ctx)
	if !found {
		return nil, cosmoserrors.Wrapf(types.ErrContractNotFound, "GetSystemContract address not found")
	}
	connectorAddress := common.HexToAddress(system.ConnectorZevm)

	zevmConnectorAbi, err := zevmconnectorcontract.ZetaConnectorZEVMMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	err = k.DepositCoinsToFungibleModule(ctx, remainingZetaValue)
	if err != nil {
		return nil, err
	}
	return k.CallEVM(
		ctx,
		*zevmConnectorAbi,
		types.ModuleAddressEVM,
		connectorAddress,
		remainingZetaValue,
		ZEVMGasLimitConnectorCall,
		true,
		false,
		"onRevert",
		zetaTxSenderAddress,
		sourceChainID,
		destinationAddress,
		destinationChainID,
		remainingZetaValue,
		message,
		internalSendHash,
	)
}

// QueryProtocolFlatFee returns the protocol flat fee associated with a given zrc20
func (k Keeper) QueryProtocolFlatFee(ctx sdk.Context, contract common.Address) (*big.Int, error) {
	zrc20ABI, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	res, err := k.CallEVM(
		ctx,
		*zrc20ABI,
		types.ModuleAddressEVM,
		contract,
		BigIntZero,
		nil,
		false,
		false,
		"PROTOCOL_FLAT_FEE",
	)
	if err != nil {
		return nil, err
	}

	unpacked, err := zrc20ABI.Unpack("PROTOCOL_FLAT_FEE", res.Ret)
	if err != nil {
		return nil, err
	}
	if len(unpacked) == 0 {
		return nil, fmt.Errorf("expect 1 returned values, got %d", len(unpacked))
	}

	protocolGasFee, ok := unpacked[0].(*big.Int)
	if !ok {
		return nil, errors.New("can't read returned value as big.Int")
	}

	return protocolGasFee, nil
}

// QueryGasLimit returns the gas limit for a withdrawal transaction associated with a given zrc20
func (k Keeper) QueryGasLimit(ctx sdk.Context, contract common.Address) (*big.Int, error) {
	zrc20ABI, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	res, err := k.CallEVM(
		ctx,
		*zrc20ABI,
		types.ModuleAddressEVM,
		contract,
		BigIntZero,
		nil,
		false,
		false,
		"GAS_LIMIT",
	)
	if err != nil {
		return nil, err
	}

	unpacked, err := zrc20ABI.Unpack("GAS_LIMIT", res.Ret)
	if err != nil {
		return nil, err
	}
	if len(unpacked) == 0 {
		return nil, fmt.Errorf("expect 1 returned values, got %d", len(unpacked))
	}

	gasLimit, ok := unpacked[0].(*big.Int)
	if !ok {
		return nil, errors.New("can't read returned value as big.Int")
	}

	return gasLimit, nil
}

// QueryZRC20Data returns the data of a deployed ZRC20 contract
func (k Keeper) QueryZRC20Data(
	ctx sdk.Context,
	contract common.Address,
) (types.ZRC20Data, error) {
	var (
		nameRes    types.ZRC20StringResponse
		symbolRes  types.ZRC20StringResponse
		decimalRes types.ZRC20Uint8Response
	)

	zrc4ABI, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return types.ZRC20Data{}, cosmoserrors.Wrapf(
			types.ErrABIUnpack, "failed to get ABI: %s", err.Error(),
		)
	}

	// Name
	res, err := k.CallEVM(ctx, *zrc4ABI, types.ModuleAddressEVM, contract, BigIntZero, nil, false, false, "name")
	if err != nil {
		return types.ZRC20Data{}, err
	}

	if err := zrc4ABI.UnpackIntoInterface(&nameRes, "name", res.Ret); err != nil {
		return types.ZRC20Data{}, cosmoserrors.Wrapf(types.ErrABIUnpack, "failed to unpack name: %s", err.Error())
	}

	// Symbol
	res, err = k.CallEVM(ctx, *zrc4ABI, types.ModuleAddressEVM, contract, BigIntZero, nil, false, false, "symbol")
	if err != nil {
		return types.ZRC20Data{}, err
	}

	if err := zrc4ABI.UnpackIntoInterface(&symbolRes, "symbol", res.Ret); err != nil {
		return types.ZRC20Data{}, cosmoserrors.Wrapf(types.ErrABIUnpack, "failed to unpack symbol: %s", err.Error())
	}

	// Decimals
	res, err = k.CallEVM(ctx, *zrc4ABI, types.ModuleAddressEVM, contract, BigIntZero, nil, false, false, "decimals")
	if err != nil {
		return types.ZRC20Data{}, err
	}

	if err := zrc4ABI.UnpackIntoInterface(&decimalRes, "decimals", res.Ret); err != nil {
		return types.ZRC20Data{}, cosmoserrors.Wrapf(types.ErrABIUnpack, "failed to unpack decimals: %s", err.Error())
	}

	return types.NewZRC20Data(nameRes.Value, symbolRes.Value, decimalRes.Value), nil
}

// BalanceOfZRC4 queries an account's balance for a given ZRC4 contract
func (k Keeper) BalanceOfZRC4(
	ctx sdk.Context,
	contract, account common.Address,
) (*big.Int, error) {
	zrc4ABI, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, err.Error())
	}
	res, err := k.CallEVM(ctx, *zrc4ABI, types.ModuleAddressEVM, contract, BigIntZero, nil, false, false, "balanceOf",
		account)
	if err != nil {
		return nil, err
	}

	unpacked, err := zrc4ABI.Unpack("balanceOf", res.Ret)
	if err != nil || len(unpacked) == 0 {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, err.Error())
	}

	balance, ok := unpacked[0].(*big.Int)
	if !ok {
		return nil, cosmoserrors.Wrapf(types.ErrABIUnpack, "failed to unpack balance")
	}

	return balance, nil
}

// TotalSupplyZRC4 queries the total supply of a given ZRC4 contract
func (k Keeper) TotalSupplyZRC4(
	ctx sdk.Context,
	contract common.Address,
) (*big.Int, error) {
	abi, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, err.Error())
	}
	res, err := k.CallEVM(ctx, *abi, types.ModuleAddressEVM, contract, BigIntZero, nil, false, false, "totalSupply")
	if err != nil {
		return nil, err
	}

	unpacked, err := abi.Unpack("totalSupply", res.Ret)
	if err != nil || len(unpacked) == 0 {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, err.Error())
	}

	totalSupply, ok := unpacked[0].(*big.Int)
	if !ok {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, "failed to unpack total supply")
	}

	return totalSupply, nil
}

// QueryChainIDFromContract returns the chain id of the chain
func (k Keeper) QueryChainIDFromContract(
	ctx sdk.Context,
	contract common.Address,
) (*big.Int, error) {
	abi, err := zrc20.ZRC20MetaData.GetAbi()
	if err != nil {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, err.Error())
	}
	res, err := k.CallEVM(ctx, *abi, types.ModuleAddressEVM, contract, BigIntZero, nil, false, false, "CHAIN_ID")
	if err != nil {
		return nil, err
	}

	unpacked, err := abi.Unpack("CHAIN_ID", res.Ret)
	if err != nil || len(unpacked) == 0 {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, err.Error())
	}

	chainID, ok := unpacked[0].(*big.Int)
	if !ok {
		return nil, cosmoserrors.Wrap(types.ErrABIUnpack, "failed to unpack chain ID")
	}

	return chainID, nil
}

// CallEVM performs a smart contract method call using given args
// returns (msg,err) the EVM execution result if there is any, even if error is non-nil due to contract reverts
// Furthermore, err!=nil && msg!=nil && msg.Failed() means the contract call reverted.
func (k Keeper) CallEVM(
	ctx sdk.Context,
	abi abi.ABI,
	from, contract common.Address,
	value, gasLimit *big.Int,
	commit bool,
	noEthereumTxEvent bool,
	method string,
	args ...interface{},
) (*evmtypes.MsgEthereumTxResponse, error) {
	data, err := abi.Pack(method, args...)
	if err != nil {
		return nil, cosmoserrors.Wrap(
			types.ErrABIPack,
			cosmoserrors.Wrap(err, "failed to create transaction data").Error(),
		)
	}

	k.Logger(ctx).Debug("calling EVM", "from", from, "contract", contract, "value", value, "method", method)
	resp, err := k.CallEVMWithData(ctx, from, &contract, data, commit, noEthereumTxEvent, value, gasLimit)
	if err != nil {
		errMes := fmt.Sprintf(
			"contract call failed: method '%s', contract '%s', args: %v",
			method,
			contract.Hex(),
			args,
		)

		// if it is a revert error then add the revert reason to the error message
		revertErr, ok := err.(*evmtypes.RevertError)
		if ok {
			errMes = fmt.Sprintf("%s, reason: %v", errMes, revertErr.ErrorData())
		}
		return resp, cosmoserrors.Wrap(err, errMes)
	}
	return resp, nil
}

// CallEVMWithData performs a smart contract method call using contract data
// value is the amount of wei to send; gaslimit is the custom gas limit, if nil EstimateGas is used
// to bisect the correct gas limit (this may sometimes result in insufficient gas limit; not sure why)
//
// noEthereumTxEvent flag is used to control if ethereum_tx events should be emitted
// which will mean these txs are indexed and available in rpc methods
//
// returns (msg,err) the EVM execution result if there is any, even if error is non-nil due to contract reverts
// Furthermore, err!=nil && msg!=nil && msg.Failed() means the contract call reverted; in which case
// msg.Ret gives the RET code if contract revert with REVERT opcode with parameters.
func (k Keeper) CallEVMWithData(
	ctx sdk.Context,
	from common.Address,
	contract *common.Address,
	data []byte,
	commit bool,
	noEthereumTxEvent bool,
	value *big.Int,
	gasLimit *big.Int,
) (*evmtypes.MsgEthereumTxResponse, error) {
	nonce, err := k.authKeeper.GetSequence(ctx, from.Bytes())
	if err != nil {
		return nil, err
	}
	gasCap := config.DefaultGasCap
	if commit && gasLimit == nil {
		args, err := json.Marshal(evmtypes.TransactionArgs{
			From: &from,
			To:   contract,
			Data: (*hexutil.Bytes)(&data),
		})
		if err != nil {
			return nil, cosmoserrors.Wrapf(sdkerrors.ErrJSONMarshal, "failed to marshal tx args: %s", err.Error())
		}

		gasRes, err := k.evmKeeper.EstimateGas(sdk.WrapSDKContext(ctx), &evmtypes.EthCallRequest{
			Args:   args,
			GasCap: config.DefaultGasCap,
		})
		if err != nil {
			return nil, err
		}
		gasCap = gasRes.Gas
		k.Logger(ctx).Info("call evm", "EstimateGas", gasCap)
	}
	if gasLimit != nil {
		gasCap = gasLimit.Uint64()
	}
	msg := &core.Message{
		From:              from,
		To:                contract,
		Nonce:             nonce,
		Value:             value,         // amount
		GasLimit:          gasCap,        // gasLimit
		GasFeeCap:         big.NewInt(0), // gasFeeCap
		GasTipCap:         big.NewInt(0), // gasTipCap
		GasPrice:          big.NewInt(0), // gasPrice
		Data:              data,
		AccessList:        ethtypes.AccessList{}, // AccessList
		SkipAccountChecks: !commit,               // isFake
	}
	k.evmKeeper.WithChainID(ctx) //FIXME:  set chainID for signer; should not need to do this; but seems necessary. Why?
	k.Logger(ctx).Debug("call evm", "gasCap", gasCap, "chainid", k.evmKeeper.ChainID(), "ctx.chainid", ctx.ChainID())
	res, err := k.evmKeeper.ApplyMessage(ctx, msg, evmtypes.NewNoOpTracer(), commit)
	if err != nil {
		return nil, err
	}

	// Emit events and log for the transaction if it is committed
	if commit {
		msgBytes, err := json.Marshal(msg)
		if err != nil {
			return nil, cosmoserrors.Wrap(err, "failed to encode msg")
		}
		ethTxHash := common.BytesToHash(crypto.Keccak256(msgBytes)) // NOTE(pwu): this is a fake txhash
		attrs := []sdk.Attribute{}
		if len(ctx.TxBytes()) > 0 {
			// add event for tendermint transaction hash format
			hash := tmbytes.HexBytes(tmtypes.Tx(ctx.TxBytes()).Hash())
			ethTxHash = common.BytesToHash(hash) // NOTE(pwu): use cosmos tx hash as eth tx hash if available
			attrs = append(attrs, sdk.NewAttribute(evmtypes.AttributeKeyTxHash, hash.String()))
		}
		attrs = append(attrs, []sdk.Attribute{
			sdk.NewAttribute(sdk.AttributeKeyAmount, value.String()),
			// add event for ethereum transaction hash format; NOTE(pwu): this is a fake txhash
			sdk.NewAttribute(evmtypes.AttributeKeyEthereumTxHash, ethTxHash.String()),
			// add event for index of valid ethereum tx; NOTE(pwu): fake txindex
			sdk.NewAttribute(evmtypes.AttributeKeyTxIndex, strconv.FormatUint(8888, 10)),
			// add event for eth tx gas used, we can't get it from cosmos tx result when it contains multiple eth tx msgs.
			sdk.NewAttribute(evmtypes.AttributeKeyTxGasUsed, strconv.FormatUint(res.GasUsed, 10)),
		}...)

		// recipient: contract address
		if contract != nil {
			attrs = append(attrs, sdk.NewAttribute(evmtypes.AttributeKeyRecipient, contract.Hex()))
		}
		if res.Failed() {
			attrs = append(attrs, sdk.NewAttribute(evmtypes.AttributeKeyEthereumTxFailed, res.VmError))
		}

		txLogAttrs := make([]sdk.Attribute, len(res.Logs))
		for i, log := range res.Logs {
			log.TxHash = ethTxHash.String()
			value, err := json.Marshal(log)
			if err != nil {
				return nil, cosmoserrors.Wrap(err, "failed to encode log")
			}
			txLogAttrs[i] = sdk.NewAttribute(evmtypes.AttributeKeyTxLog, string(value))
		}

		if !noEthereumTxEvent {
			// adding txData for more info in rpc methods in order to parse synthetic txs
			attrs = append(attrs, sdk.NewAttribute(evmtypes.AttributeKeyTxData, hexutil.Encode(msg.Data)))
			// adding nonce for more info in rpc methods in order to parse synthetic txs
			attrs = append(attrs, sdk.NewAttribute(evmtypes.AttributeKeyTxNonce, fmt.Sprint(nonce)))
			ctx.EventManager().EmitEvents(sdk.Events{
				sdk.NewEvent(
					evmtypes.EventTypeEthereumTx,
					attrs...,
				),
				sdk.NewEvent(
					evmtypes.EventTypeTxLog,
					txLogAttrs...,
				),
				sdk.NewEvent(
					sdk.EventTypeMessage,
					sdk.NewAttribute(sdk.AttributeKeyModule, types.ModuleName),
					sdk.NewAttribute(sdk.AttributeKeySender, from.Hex()),
					sdk.NewAttribute(evmtypes.AttributeKeyTxType, "88"), // type 88: synthetic Eth tx
				),
			})
		}

		logs := evmtypes.LogsToEthereum(res.Logs)
		var bloomReceipt ethtypes.Bloom
		if len(logs) > 0 {
			bloom := k.evmKeeper.GetBlockBloomTransient(ctx)
			bloom.Or(bloom, big.NewInt(0).SetBytes(ethtypes.LogsBloom(logs)))
			bloomReceipt = ethtypes.BytesToBloom(bloom.Bytes())
			k.evmKeeper.SetBlockBloomTransient(ctx, bloomReceipt.Big())
			k.evmKeeper.SetLogSizeTransient(ctx, (k.evmKeeper.GetLogSizeTransient(ctx))+uint64(len(logs)))
		}
	}

	if res.Failed() {
		return res, cosmoserrors.Wrapf(evmtypes.ErrVMExecution, "%s: ret 0x%x", res.VmError, res.Ret)
	}

	return res, nil
}
