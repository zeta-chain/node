// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/observer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	chains "github.com/zeta-chain/node/pkg/chains"
	_ "github.com/zeta-chain/node/pkg/proofs"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTssFundsMigratorInfoAllRequest struct {
}

func (m *QueryTssFundsMigratorInfoAllRequest) Reset()         { *m = QueryTssFundsMigratorInfoAllRequest{} }
func (m *QueryTssFundsMigratorInfoAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTssFundsMigratorInfoAllRequest) ProtoMessage()    {}
func (*QueryTssFundsMigratorInfoAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{0}
}
func (m *QueryTssFundsMigratorInfoAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssFundsMigratorInfoAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssFundsMigratorInfoAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssFundsMigratorInfoAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssFundsMigratorInfoAllRequest.Merge(m, src)
}
func (m *QueryTssFundsMigratorInfoAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssFundsMigratorInfoAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssFundsMigratorInfoAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssFundsMigratorInfoAllRequest proto.InternalMessageInfo

type QueryTssFundsMigratorInfoAllResponse struct {
	TssFundsMigrators []TssFundMigratorInfo `protobuf:"bytes,1,rep,name=tss_funds_migrators,json=tssFundsMigrators,proto3" json:"tss_funds_migrators"`
}

func (m *QueryTssFundsMigratorInfoAllResponse) Reset()         { *m = QueryTssFundsMigratorInfoAllResponse{} }
func (m *QueryTssFundsMigratorInfoAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTssFundsMigratorInfoAllResponse) ProtoMessage()    {}
func (*QueryTssFundsMigratorInfoAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{1}
}
func (m *QueryTssFundsMigratorInfoAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssFundsMigratorInfoAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssFundsMigratorInfoAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssFundsMigratorInfoAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssFundsMigratorInfoAllResponse.Merge(m, src)
}
func (m *QueryTssFundsMigratorInfoAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssFundsMigratorInfoAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssFundsMigratorInfoAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssFundsMigratorInfoAllResponse proto.InternalMessageInfo

func (m *QueryTssFundsMigratorInfoAllResponse) GetTssFundsMigrators() []TssFundMigratorInfo {
	if m != nil {
		return m.TssFundsMigrators
	}
	return nil
}

type QueryTssFundsMigratorInfoRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryTssFundsMigratorInfoRequest) Reset()         { *m = QueryTssFundsMigratorInfoRequest{} }
func (m *QueryTssFundsMigratorInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTssFundsMigratorInfoRequest) ProtoMessage()    {}
func (*QueryTssFundsMigratorInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{2}
}
func (m *QueryTssFundsMigratorInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssFundsMigratorInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssFundsMigratorInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssFundsMigratorInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssFundsMigratorInfoRequest.Merge(m, src)
}
func (m *QueryTssFundsMigratorInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssFundsMigratorInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssFundsMigratorInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssFundsMigratorInfoRequest proto.InternalMessageInfo

func (m *QueryTssFundsMigratorInfoRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryTssFundsMigratorInfoResponse struct {
	TssFundsMigrator TssFundMigratorInfo `protobuf:"bytes,1,opt,name=tss_funds_migrator,json=tssFundsMigrator,proto3" json:"tss_funds_migrator"`
}

func (m *QueryTssFundsMigratorInfoResponse) Reset()         { *m = QueryTssFundsMigratorInfoResponse{} }
func (m *QueryTssFundsMigratorInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTssFundsMigratorInfoResponse) ProtoMessage()    {}
func (*QueryTssFundsMigratorInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{3}
}
func (m *QueryTssFundsMigratorInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssFundsMigratorInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssFundsMigratorInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssFundsMigratorInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssFundsMigratorInfoResponse.Merge(m, src)
}
func (m *QueryTssFundsMigratorInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssFundsMigratorInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssFundsMigratorInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssFundsMigratorInfoResponse proto.InternalMessageInfo

func (m *QueryTssFundsMigratorInfoResponse) GetTssFundsMigrator() TssFundMigratorInfo {
	if m != nil {
		return m.TssFundsMigrator
	}
	return TssFundMigratorInfo{}
}

type QueryGetChainNoncesRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainNoncesRequest) Reset()         { *m = QueryGetChainNoncesRequest{} }
func (m *QueryGetChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainNoncesRequest) ProtoMessage()    {}
func (*QueryGetChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{4}
}
func (m *QueryGetChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainNoncesRequest.Merge(m, src)
}
func (m *QueryGetChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainNoncesRequest proto.InternalMessageInfo

func (m *QueryGetChainNoncesRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetChainNoncesResponse struct {
	ChainNonces ChainNonces `protobuf:"bytes,1,opt,name=ChainNonces,proto3" json:"ChainNonces"`
}

func (m *QueryGetChainNoncesResponse) Reset()         { *m = QueryGetChainNoncesResponse{} }
func (m *QueryGetChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainNoncesResponse) ProtoMessage()    {}
func (*QueryGetChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{5}
}
func (m *QueryGetChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainNoncesResponse.Merge(m, src)
}
func (m *QueryGetChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainNoncesResponse proto.InternalMessageInfo

func (m *QueryGetChainNoncesResponse) GetChainNonces() ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return ChainNonces{}
}

type QueryAllChainNoncesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainNoncesRequest) Reset()         { *m = QueryAllChainNoncesRequest{} }
func (m *QueryAllChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainNoncesRequest) ProtoMessage()    {}
func (*QueryAllChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{6}
}
func (m *QueryAllChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainNoncesRequest.Merge(m, src)
}
func (m *QueryAllChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainNoncesRequest proto.InternalMessageInfo

func (m *QueryAllChainNoncesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChainNoncesResponse struct {
	ChainNonces []ChainNonces       `protobuf:"bytes,1,rep,name=ChainNonces,proto3" json:"ChainNonces"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainNoncesResponse) Reset()         { *m = QueryAllChainNoncesResponse{} }
func (m *QueryAllChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainNoncesResponse) ProtoMessage()    {}
func (*QueryAllChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{7}
}
func (m *QueryAllChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainNoncesResponse.Merge(m, src)
}
func (m *QueryAllChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainNoncesResponse proto.InternalMessageInfo

func (m *QueryAllChainNoncesResponse) GetChainNonces() []ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return nil
}

func (m *QueryAllChainNoncesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingNoncesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingNoncesRequest) Reset()         { *m = QueryAllPendingNoncesRequest{} }
func (m *QueryAllPendingNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingNoncesRequest) ProtoMessage()    {}
func (*QueryAllPendingNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{8}
}
func (m *QueryAllPendingNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingNoncesRequest.Merge(m, src)
}
func (m *QueryAllPendingNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingNoncesRequest proto.InternalMessageInfo

func (m *QueryAllPendingNoncesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingNoncesResponse struct {
	PendingNonces []PendingNonces     `protobuf:"bytes,1,rep,name=pending_nonces,json=pendingNonces,proto3" json:"pending_nonces"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingNoncesResponse) Reset()         { *m = QueryAllPendingNoncesResponse{} }
func (m *QueryAllPendingNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingNoncesResponse) ProtoMessage()    {}
func (*QueryAllPendingNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{9}
}
func (m *QueryAllPendingNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingNoncesResponse.Merge(m, src)
}
func (m *QueryAllPendingNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingNoncesResponse proto.InternalMessageInfo

func (m *QueryAllPendingNoncesResponse) GetPendingNonces() []PendingNonces {
	if m != nil {
		return m.PendingNonces
	}
	return nil
}

func (m *QueryAllPendingNoncesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPendingNoncesByChainRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryPendingNoncesByChainRequest) Reset()         { *m = QueryPendingNoncesByChainRequest{} }
func (m *QueryPendingNoncesByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingNoncesByChainRequest) ProtoMessage()    {}
func (*QueryPendingNoncesByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{10}
}
func (m *QueryPendingNoncesByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingNoncesByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingNoncesByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingNoncesByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingNoncesByChainRequest.Merge(m, src)
}
func (m *QueryPendingNoncesByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingNoncesByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingNoncesByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingNoncesByChainRequest proto.InternalMessageInfo

func (m *QueryPendingNoncesByChainRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryPendingNoncesByChainResponse struct {
	PendingNonces PendingNonces `protobuf:"bytes,1,opt,name=pending_nonces,json=pendingNonces,proto3" json:"pending_nonces"`
}

func (m *QueryPendingNoncesByChainResponse) Reset()         { *m = QueryPendingNoncesByChainResponse{} }
func (m *QueryPendingNoncesByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingNoncesByChainResponse) ProtoMessage()    {}
func (*QueryPendingNoncesByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{11}
}
func (m *QueryPendingNoncesByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingNoncesByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingNoncesByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingNoncesByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingNoncesByChainResponse.Merge(m, src)
}
func (m *QueryPendingNoncesByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingNoncesByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingNoncesByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingNoncesByChainResponse proto.InternalMessageInfo

func (m *QueryPendingNoncesByChainResponse) GetPendingNonces() PendingNonces {
	if m != nil {
		return m.PendingNonces
	}
	return PendingNonces{}
}

type QueryGetTSSRequest struct {
}

func (m *QueryGetTSSRequest) Reset()         { *m = QueryGetTSSRequest{} }
func (m *QueryGetTSSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSRequest) ProtoMessage()    {}
func (*QueryGetTSSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{12}
}
func (m *QueryGetTSSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSRequest.Merge(m, src)
}
func (m *QueryGetTSSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSRequest proto.InternalMessageInfo

type QueryGetTSSResponse struct {
	TSS TSS `protobuf:"bytes,1,opt,name=TSS,proto3" json:"TSS"`
}

func (m *QueryGetTSSResponse) Reset()         { *m = QueryGetTSSResponse{} }
func (m *QueryGetTSSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSResponse) ProtoMessage()    {}
func (*QueryGetTSSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{13}
}
func (m *QueryGetTSSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSResponse.Merge(m, src)
}
func (m *QueryGetTSSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSResponse proto.InternalMessageInfo

func (m *QueryGetTSSResponse) GetTSS() TSS {
	if m != nil {
		return m.TSS
	}
	return TSS{}
}

type QueryGetTssAddressRequest struct {
	BitcoinChainId int64 `protobuf:"varint,2,opt,name=bitcoin_chain_id,json=bitcoinChainId,proto3" json:"bitcoin_chain_id,omitempty"`
}

func (m *QueryGetTssAddressRequest) Reset()         { *m = QueryGetTssAddressRequest{} }
func (m *QueryGetTssAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTssAddressRequest) ProtoMessage()    {}
func (*QueryGetTssAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{14}
}
func (m *QueryGetTssAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressRequest.Merge(m, src)
}
func (m *QueryGetTssAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressRequest proto.InternalMessageInfo

func (m *QueryGetTssAddressRequest) GetBitcoinChainId() int64 {
	if m != nil {
		return m.BitcoinChainId
	}
	return 0
}

type QueryGetTssAddressResponse struct {
	Eth string `protobuf:"bytes,1,opt,name=eth,proto3" json:"eth,omitempty"`
	Btc string `protobuf:"bytes,2,opt,name=btc,proto3" json:"btc,omitempty"`
}

func (m *QueryGetTssAddressResponse) Reset()         { *m = QueryGetTssAddressResponse{} }
func (m *QueryGetTssAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTssAddressResponse) ProtoMessage()    {}
func (*QueryGetTssAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{15}
}
func (m *QueryGetTssAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressResponse.Merge(m, src)
}
func (m *QueryGetTssAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressResponse proto.InternalMessageInfo

func (m *QueryGetTssAddressResponse) GetEth() string {
	if m != nil {
		return m.Eth
	}
	return ""
}

func (m *QueryGetTssAddressResponse) GetBtc() string {
	if m != nil {
		return m.Btc
	}
	return ""
}

type QueryGetTssAddressByFinalizedHeightRequest struct {
	FinalizedZetaHeight int64 `protobuf:"varint,1,opt,name=finalized_zeta_height,json=finalizedZetaHeight,proto3" json:"finalized_zeta_height,omitempty"`
	BitcoinChainId      int64 `protobuf:"varint,2,opt,name=bitcoin_chain_id,json=bitcoinChainId,proto3" json:"bitcoin_chain_id,omitempty"`
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) Reset() {
	*m = QueryGetTssAddressByFinalizedHeightRequest{}
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetTssAddressByFinalizedHeightRequest) ProtoMessage() {}
func (*QueryGetTssAddressByFinalizedHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{16}
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest.Merge(m, src)
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressByFinalizedHeightRequest proto.InternalMessageInfo

func (m *QueryGetTssAddressByFinalizedHeightRequest) GetFinalizedZetaHeight() int64 {
	if m != nil {
		return m.FinalizedZetaHeight
	}
	return 0
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) GetBitcoinChainId() int64 {
	if m != nil {
		return m.BitcoinChainId
	}
	return 0
}

type QueryGetTssAddressByFinalizedHeightResponse struct {
	Eth string `protobuf:"bytes,1,opt,name=eth,proto3" json:"eth,omitempty"`
	Btc string `protobuf:"bytes,2,opt,name=btc,proto3" json:"btc,omitempty"`
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) Reset() {
	*m = QueryGetTssAddressByFinalizedHeightResponse{}
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetTssAddressByFinalizedHeightResponse) ProtoMessage() {}
func (*QueryGetTssAddressByFinalizedHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{17}
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse.Merge(m, src)
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTssAddressByFinalizedHeightResponse proto.InternalMessageInfo

func (m *QueryGetTssAddressByFinalizedHeightResponse) GetEth() string {
	if m != nil {
		return m.Eth
	}
	return ""
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) GetBtc() string {
	if m != nil {
		return m.Btc
	}
	return ""
}

type QueryTssHistoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTssHistoryRequest) Reset()         { *m = QueryTssHistoryRequest{} }
func (m *QueryTssHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTssHistoryRequest) ProtoMessage()    {}
func (*QueryTssHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{18}
}
func (m *QueryTssHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssHistoryRequest.Merge(m, src)
}
func (m *QueryTssHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssHistoryRequest proto.InternalMessageInfo

func (m *QueryTssHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryTssHistoryResponse struct {
	TssList    []TSS               `protobuf:"bytes,1,rep,name=tss_list,json=tssList,proto3" json:"tss_list"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTssHistoryResponse) Reset()         { *m = QueryTssHistoryResponse{} }
func (m *QueryTssHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTssHistoryResponse) ProtoMessage()    {}
func (*QueryTssHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{19}
}
func (m *QueryTssHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssHistoryResponse.Merge(m, src)
}
func (m *QueryTssHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssHistoryResponse proto.InternalMessageInfo

func (m *QueryTssHistoryResponse) GetTssList() []TSS {
	if m != nil {
		return m.TssList
	}
	return nil
}

func (m *QueryTssHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryHasVotedRequest struct {
	BallotIdentifier string `protobuf:"bytes,1,opt,name=ballot_identifier,json=ballotIdentifier,proto3" json:"ballot_identifier,omitempty"`
	VoterAddress     string `protobuf:"bytes,2,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
}

func (m *QueryHasVotedRequest) Reset()         { *m = QueryHasVotedRequest{} }
func (m *QueryHasVotedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHasVotedRequest) ProtoMessage()    {}
func (*QueryHasVotedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{20}
}
func (m *QueryHasVotedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasVotedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasVotedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasVotedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasVotedRequest.Merge(m, src)
}
func (m *QueryHasVotedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasVotedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasVotedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasVotedRequest proto.InternalMessageInfo

func (m *QueryHasVotedRequest) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

func (m *QueryHasVotedRequest) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

type QueryHasVotedResponse struct {
	HasVoted bool `protobuf:"varint,1,opt,name=has_voted,json=hasVoted,proto3" json:"has_voted,omitempty"`
}

func (m *QueryHasVotedResponse) Reset()         { *m = QueryHasVotedResponse{} }
func (m *QueryHasVotedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHasVotedResponse) ProtoMessage()    {}
func (*QueryHasVotedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{21}
}
func (m *QueryHasVotedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasVotedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasVotedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasVotedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasVotedResponse.Merge(m, src)
}
func (m *QueryHasVotedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasVotedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasVotedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasVotedResponse proto.InternalMessageInfo

func (m *QueryHasVotedResponse) GetHasVoted() bool {
	if m != nil {
		return m.HasVoted
	}
	return false
}

type QueryBallotByIdentifierRequest struct {
	BallotIdentifier string `protobuf:"bytes,1,opt,name=ballot_identifier,json=ballotIdentifier,proto3" json:"ballot_identifier,omitempty"`
}

func (m *QueryBallotByIdentifierRequest) Reset()         { *m = QueryBallotByIdentifierRequest{} }
func (m *QueryBallotByIdentifierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierRequest) ProtoMessage()    {}
func (*QueryBallotByIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{22}
}
func (m *QueryBallotByIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierRequest.Merge(m, src)
}
func (m *QueryBallotByIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierRequest proto.InternalMessageInfo

func (m *QueryBallotByIdentifierRequest) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

type QueryBallotByIdentifierResponse struct {
	BallotIdentifier string          `protobuf:"bytes,1,opt,name=ballot_identifier,json=ballotIdentifier,proto3" json:"ballot_identifier,omitempty"`
	Voters           []VoterList     `protobuf:"bytes,2,rep,name=voters,proto3" json:"voters"`
	ObservationType  ObservationType `protobuf:"varint,3,opt,name=observation_type,json=observationType,proto3,enum=zetachain.zetacore.observer.ObservationType" json:"observation_type,omitempty"`
	BallotStatus     BallotStatus    `protobuf:"varint,4,opt,name=ballot_status,json=ballotStatus,proto3,enum=zetachain.zetacore.observer.BallotStatus" json:"ballot_status,omitempty"`
}

func (m *QueryBallotByIdentifierResponse) Reset()         { *m = QueryBallotByIdentifierResponse{} }
func (m *QueryBallotByIdentifierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierResponse) ProtoMessage()    {}
func (*QueryBallotByIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{23}
}
func (m *QueryBallotByIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierResponse.Merge(m, src)
}
func (m *QueryBallotByIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierResponse proto.InternalMessageInfo

func (m *QueryBallotByIdentifierResponse) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

func (m *QueryBallotByIdentifierResponse) GetVoters() []VoterList {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *QueryBallotByIdentifierResponse) GetObservationType() ObservationType {
	if m != nil {
		return m.ObservationType
	}
	return ObservationType_EmptyObserverType
}

func (m *QueryBallotByIdentifierResponse) GetBallotStatus() BallotStatus {
	if m != nil {
		return m.BallotStatus
	}
	return BallotStatus_BallotFinalized_SuccessObservation
}

type QueryObserverSet struct {
}

func (m *QueryObserverSet) Reset()         { *m = QueryObserverSet{} }
func (m *QueryObserverSet) String() string { return proto.CompactTextString(m) }
func (*QueryObserverSet) ProtoMessage()    {}
func (*QueryObserverSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{24}
}
func (m *QueryObserverSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserverSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserverSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserverSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserverSet.Merge(m, src)
}
func (m *QueryObserverSet) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserverSet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserverSet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserverSet proto.InternalMessageInfo

type QueryObserverSetResponse struct {
	Observers []string `protobuf:"bytes,1,rep,name=observers,proto3" json:"observers,omitempty"`
}

func (m *QueryObserverSetResponse) Reset()         { *m = QueryObserverSetResponse{} }
func (m *QueryObserverSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryObserverSetResponse) ProtoMessage()    {}
func (*QueryObserverSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{25}
}
func (m *QueryObserverSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserverSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserverSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserverSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserverSetResponse.Merge(m, src)
}
func (m *QueryObserverSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserverSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserverSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserverSetResponse proto.InternalMessageInfo

func (m *QueryObserverSetResponse) GetObservers() []string {
	if m != nil {
		return m.Observers
	}
	return nil
}

type QuerySupportedChains struct {
}

func (m *QuerySupportedChains) Reset()         { *m = QuerySupportedChains{} }
func (m *QuerySupportedChains) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChains) ProtoMessage()    {}
func (*QuerySupportedChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{26}
}
func (m *QuerySupportedChains) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChains.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChains.Merge(m, src)
}
func (m *QuerySupportedChains) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChains) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChains.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChains proto.InternalMessageInfo

type QuerySupportedChainsResponse struct {
	Chains []chains.Chain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains"`
}

func (m *QuerySupportedChainsResponse) Reset()         { *m = QuerySupportedChainsResponse{} }
func (m *QuerySupportedChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChainsResponse) ProtoMessage()    {}
func (*QuerySupportedChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{27}
}
func (m *QuerySupportedChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChainsResponse.Merge(m, src)
}
func (m *QuerySupportedChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChainsResponse proto.InternalMessageInfo

func (m *QuerySupportedChainsResponse) GetChains() []chains.Chain {
	if m != nil {
		return m.Chains
	}
	return nil
}

type QueryGetChainParamsForChainRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainParamsForChainRequest) Reset()         { *m = QueryGetChainParamsForChainRequest{} }
func (m *QueryGetChainParamsForChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsForChainRequest) ProtoMessage()    {}
func (*QueryGetChainParamsForChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{28}
}
func (m *QueryGetChainParamsForChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsForChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsForChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsForChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsForChainRequest.Merge(m, src)
}
func (m *QueryGetChainParamsForChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsForChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsForChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsForChainRequest proto.InternalMessageInfo

func (m *QueryGetChainParamsForChainRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetChainParamsForChainResponse struct {
	ChainParams *ChainParams `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
}

func (m *QueryGetChainParamsForChainResponse) Reset()         { *m = QueryGetChainParamsForChainResponse{} }
func (m *QueryGetChainParamsForChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsForChainResponse) ProtoMessage()    {}
func (*QueryGetChainParamsForChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{29}
}
func (m *QueryGetChainParamsForChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsForChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsForChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsForChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsForChainResponse.Merge(m, src)
}
func (m *QueryGetChainParamsForChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsForChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsForChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsForChainResponse proto.InternalMessageInfo

func (m *QueryGetChainParamsForChainResponse) GetChainParams() *ChainParams {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

type QueryGetChainParamsRequest struct {
}

func (m *QueryGetChainParamsRequest) Reset()         { *m = QueryGetChainParamsRequest{} }
func (m *QueryGetChainParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsRequest) ProtoMessage()    {}
func (*QueryGetChainParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{30}
}
func (m *QueryGetChainParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsRequest.Merge(m, src)
}
func (m *QueryGetChainParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsRequest proto.InternalMessageInfo

type QueryGetChainParamsResponse struct {
	ChainParams *ChainParamsList `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
}

func (m *QueryGetChainParamsResponse) Reset()         { *m = QueryGetChainParamsResponse{} }
func (m *QueryGetChainParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainParamsResponse) ProtoMessage()    {}
func (*QueryGetChainParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{31}
}
func (m *QueryGetChainParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainParamsResponse.Merge(m, src)
}
func (m *QueryGetChainParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainParamsResponse proto.InternalMessageInfo

func (m *QueryGetChainParamsResponse) GetChainParams() *ChainParamsList {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

type QueryGetNodeAccountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNodeAccountRequest) Reset()         { *m = QueryGetNodeAccountRequest{} }
func (m *QueryGetNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountRequest) ProtoMessage()    {}
func (*QueryGetNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{32}
}
func (m *QueryGetNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountRequest.Merge(m, src)
}
func (m *QueryGetNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountRequest proto.InternalMessageInfo

func (m *QueryGetNodeAccountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetNodeAccountResponse struct {
	NodeAccount *NodeAccount `protobuf:"bytes,1,opt,name=node_account,json=nodeAccount,proto3" json:"node_account,omitempty"`
}

func (m *QueryGetNodeAccountResponse) Reset()         { *m = QueryGetNodeAccountResponse{} }
func (m *QueryGetNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountResponse) ProtoMessage()    {}
func (*QueryGetNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{33}
}
func (m *QueryGetNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountResponse.Merge(m, src)
}
func (m *QueryGetNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountResponse proto.InternalMessageInfo

func (m *QueryGetNodeAccountResponse) GetNodeAccount() *NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

type QueryAllNodeAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountRequest) Reset()         { *m = QueryAllNodeAccountRequest{} }
func (m *QueryAllNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountRequest) ProtoMessage()    {}
func (*QueryAllNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{34}
}
func (m *QueryAllNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountRequest.Merge(m, src)
}
func (m *QueryAllNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountRequest proto.InternalMessageInfo

func (m *QueryAllNodeAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNodeAccountResponse struct {
	NodeAccount []*NodeAccount      `protobuf:"bytes,1,rep,name=NodeAccount,proto3" json:"NodeAccount,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountResponse) Reset()         { *m = QueryAllNodeAccountResponse{} }
func (m *QueryAllNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountResponse) ProtoMessage()    {}
func (*QueryAllNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{35}
}
func (m *QueryAllNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountResponse.Merge(m, src)
}
func (m *QueryAllNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountResponse proto.InternalMessageInfo

func (m *QueryAllNodeAccountResponse) GetNodeAccount() []*NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

func (m *QueryAllNodeAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainFlagsRequest struct {
}

func (m *QueryGetCrosschainFlagsRequest) Reset()         { *m = QueryGetCrosschainFlagsRequest{} }
func (m *QueryGetCrosschainFlagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainFlagsRequest) ProtoMessage()    {}
func (*QueryGetCrosschainFlagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{36}
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainFlagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainFlagsRequest.Merge(m, src)
}
func (m *QueryGetCrosschainFlagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainFlagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainFlagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainFlagsRequest proto.InternalMessageInfo

type QueryGetCrosschainFlagsResponse struct {
	CrosschainFlags CrosschainFlags `protobuf:"bytes,1,opt,name=crosschain_flags,json=crosschainFlags,proto3" json:"crosschain_flags"`
}

func (m *QueryGetCrosschainFlagsResponse) Reset()         { *m = QueryGetCrosschainFlagsResponse{} }
func (m *QueryGetCrosschainFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainFlagsResponse) ProtoMessage()    {}
func (*QueryGetCrosschainFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{37}
}
func (m *QueryGetCrosschainFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainFlagsResponse.Merge(m, src)
}
func (m *QueryGetCrosschainFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainFlagsResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainFlagsResponse) GetCrosschainFlags() CrosschainFlags {
	if m != nil {
		return m.CrosschainFlags
	}
	return CrosschainFlags{}
}

type QueryGetKeygenRequest struct {
}

func (m *QueryGetKeygenRequest) Reset()         { *m = QueryGetKeygenRequest{} }
func (m *QueryGetKeygenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeygenRequest) ProtoMessage()    {}
func (*QueryGetKeygenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{38}
}
func (m *QueryGetKeygenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeygenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeygenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeygenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeygenRequest.Merge(m, src)
}
func (m *QueryGetKeygenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeygenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeygenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeygenRequest proto.InternalMessageInfo

type QueryGetKeygenResponse struct {
	Keygen *Keygen `protobuf:"bytes,1,opt,name=keygen,proto3" json:"keygen,omitempty"`
}

func (m *QueryGetKeygenResponse) Reset()         { *m = QueryGetKeygenResponse{} }
func (m *QueryGetKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeygenResponse) ProtoMessage()    {}
func (*QueryGetKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{39}
}
func (m *QueryGetKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeygenResponse.Merge(m, src)
}
func (m *QueryGetKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeygenResponse proto.InternalMessageInfo

func (m *QueryGetKeygenResponse) GetKeygen() *Keygen {
	if m != nil {
		return m.Keygen
	}
	return nil
}

type QueryShowObserverCountRequest struct {
}

func (m *QueryShowObserverCountRequest) Reset()         { *m = QueryShowObserverCountRequest{} }
func (m *QueryShowObserverCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowObserverCountRequest) ProtoMessage()    {}
func (*QueryShowObserverCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{40}
}
func (m *QueryShowObserverCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowObserverCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowObserverCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowObserverCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowObserverCountRequest.Merge(m, src)
}
func (m *QueryShowObserverCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowObserverCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowObserverCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowObserverCountRequest proto.InternalMessageInfo

type QueryShowObserverCountResponse struct {
	LastObserverCount *LastObserverCount `protobuf:"bytes,1,opt,name=last_observer_count,json=lastObserverCount,proto3" json:"last_observer_count,omitempty"`
}

func (m *QueryShowObserverCountResponse) Reset()         { *m = QueryShowObserverCountResponse{} }
func (m *QueryShowObserverCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowObserverCountResponse) ProtoMessage()    {}
func (*QueryShowObserverCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{41}
}
func (m *QueryShowObserverCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowObserverCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowObserverCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowObserverCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowObserverCountResponse.Merge(m, src)
}
func (m *QueryShowObserverCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowObserverCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowObserverCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowObserverCountResponse proto.InternalMessageInfo

func (m *QueryShowObserverCountResponse) GetLastObserverCount() *LastObserverCount {
	if m != nil {
		return m.LastObserverCount
	}
	return nil
}

type QueryBlameByIdentifierRequest struct {
	BlameIdentifier string `protobuf:"bytes,1,opt,name=blame_identifier,json=blameIdentifier,proto3" json:"blame_identifier,omitempty"`
}

func (m *QueryBlameByIdentifierRequest) Reset()         { *m = QueryBlameByIdentifierRequest{} }
func (m *QueryBlameByIdentifierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlameByIdentifierRequest) ProtoMessage()    {}
func (*QueryBlameByIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{42}
}
func (m *QueryBlameByIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlameByIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlameByIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlameByIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlameByIdentifierRequest.Merge(m, src)
}
func (m *QueryBlameByIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlameByIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlameByIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlameByIdentifierRequest proto.InternalMessageInfo

func (m *QueryBlameByIdentifierRequest) GetBlameIdentifier() string {
	if m != nil {
		return m.BlameIdentifier
	}
	return ""
}

type QueryBlameByIdentifierResponse struct {
	BlameInfo *Blame `protobuf:"bytes,1,opt,name=blame_info,json=blameInfo,proto3" json:"blame_info,omitempty"`
}

func (m *QueryBlameByIdentifierResponse) Reset()         { *m = QueryBlameByIdentifierResponse{} }
func (m *QueryBlameByIdentifierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlameByIdentifierResponse) ProtoMessage()    {}
func (*QueryBlameByIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{43}
}
func (m *QueryBlameByIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlameByIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlameByIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlameByIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlameByIdentifierResponse.Merge(m, src)
}
func (m *QueryBlameByIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlameByIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlameByIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlameByIdentifierResponse proto.InternalMessageInfo

func (m *QueryBlameByIdentifierResponse) GetBlameInfo() *Blame {
	if m != nil {
		return m.BlameInfo
	}
	return nil
}

type QueryAllBlameRecordsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlameRecordsRequest) Reset()         { *m = QueryAllBlameRecordsRequest{} }
func (m *QueryAllBlameRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlameRecordsRequest) ProtoMessage()    {}
func (*QueryAllBlameRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{44}
}
func (m *QueryAllBlameRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlameRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlameRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlameRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlameRecordsRequest.Merge(m, src)
}
func (m *QueryAllBlameRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlameRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlameRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlameRecordsRequest proto.InternalMessageInfo

func (m *QueryAllBlameRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlameRecordsResponse struct {
	BlameInfo  []Blame             `protobuf:"bytes,1,rep,name=blame_info,json=blameInfo,proto3" json:"blame_info"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlameRecordsResponse) Reset()         { *m = QueryAllBlameRecordsResponse{} }
func (m *QueryAllBlameRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlameRecordsResponse) ProtoMessage()    {}
func (*QueryAllBlameRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{45}
}
func (m *QueryAllBlameRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlameRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlameRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlameRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlameRecordsResponse.Merge(m, src)
}
func (m *QueryAllBlameRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlameRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlameRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlameRecordsResponse proto.InternalMessageInfo

func (m *QueryAllBlameRecordsResponse) GetBlameInfo() []Blame {
	if m != nil {
		return m.BlameInfo
	}
	return nil
}

func (m *QueryAllBlameRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBlameByChainAndNonceRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce   int64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryBlameByChainAndNonceRequest) Reset()         { *m = QueryBlameByChainAndNonceRequest{} }
func (m *QueryBlameByChainAndNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlameByChainAndNonceRequest) ProtoMessage()    {}
func (*QueryBlameByChainAndNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{46}
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlameByChainAndNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlameByChainAndNonceRequest.Merge(m, src)
}
func (m *QueryBlameByChainAndNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlameByChainAndNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlameByChainAndNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlameByChainAndNonceRequest proto.InternalMessageInfo

func (m *QueryBlameByChainAndNonceRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryBlameByChainAndNonceRequest) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryBlameByChainAndNonceResponse struct {
	BlameInfo []*Blame `protobuf:"bytes,1,rep,name=blame_info,json=blameInfo,proto3" json:"blame_info,omitempty"`
}

func (m *QueryBlameByChainAndNonceResponse) Reset()         { *m = QueryBlameByChainAndNonceResponse{} }
func (m *QueryBlameByChainAndNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlameByChainAndNonceResponse) ProtoMessage()    {}
func (*QueryBlameByChainAndNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_25b2aa420449a0c0, []int{47}
}
func (m *QueryBlameByChainAndNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlameByChainAndNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlameByChainAndNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlameByChainAndNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlameByChainAndNonceResponse.Merge(m, src)
}
func (m *QueryBlameByChainAndNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlameByChainAndNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlameByChainAndNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlameByChainAndNonceResponse proto.InternalMessageInfo

func (m *QueryBlameByChainAndNonceResponse) GetBlameInfo() []*Blame {
	if m != nil {
		return m.BlameInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTssFundsMigratorInfoAllRequest)(nil), "zetachain.zetacore.observer.QueryTssFundsMigratorInfoAllRequest")
	proto.RegisterType((*QueryTssFundsMigratorInfoAllResponse)(nil), "zetachain.zetacore.observer.QueryTssFundsMigratorInfoAllResponse")
	proto.RegisterType((*QueryTssFundsMigratorInfoRequest)(nil), "zetachain.zetacore.observer.QueryTssFundsMigratorInfoRequest")
	proto.RegisterType((*QueryTssFundsMigratorInfoResponse)(nil), "zetachain.zetacore.observer.QueryTssFundsMigratorInfoResponse")
	proto.RegisterType((*QueryGetChainNoncesRequest)(nil), "zetachain.zetacore.observer.QueryGetChainNoncesRequest")
	proto.RegisterType((*QueryGetChainNoncesResponse)(nil), "zetachain.zetacore.observer.QueryGetChainNoncesResponse")
	proto.RegisterType((*QueryAllChainNoncesRequest)(nil), "zetachain.zetacore.observer.QueryAllChainNoncesRequest")
	proto.RegisterType((*QueryAllChainNoncesResponse)(nil), "zetachain.zetacore.observer.QueryAllChainNoncesResponse")
	proto.RegisterType((*QueryAllPendingNoncesRequest)(nil), "zetachain.zetacore.observer.QueryAllPendingNoncesRequest")
	proto.RegisterType((*QueryAllPendingNoncesResponse)(nil), "zetachain.zetacore.observer.QueryAllPendingNoncesResponse")
	proto.RegisterType((*QueryPendingNoncesByChainRequest)(nil), "zetachain.zetacore.observer.QueryPendingNoncesByChainRequest")
	proto.RegisterType((*QueryPendingNoncesByChainResponse)(nil), "zetachain.zetacore.observer.QueryPendingNoncesByChainResponse")
	proto.RegisterType((*QueryGetTSSRequest)(nil), "zetachain.zetacore.observer.QueryGetTSSRequest")
	proto.RegisterType((*QueryGetTSSResponse)(nil), "zetachain.zetacore.observer.QueryGetTSSResponse")
	proto.RegisterType((*QueryGetTssAddressRequest)(nil), "zetachain.zetacore.observer.QueryGetTssAddressRequest")
	proto.RegisterType((*QueryGetTssAddressResponse)(nil), "zetachain.zetacore.observer.QueryGetTssAddressResponse")
	proto.RegisterType((*QueryGetTssAddressByFinalizedHeightRequest)(nil), "zetachain.zetacore.observer.QueryGetTssAddressByFinalizedHeightRequest")
	proto.RegisterType((*QueryGetTssAddressByFinalizedHeightResponse)(nil), "zetachain.zetacore.observer.QueryGetTssAddressByFinalizedHeightResponse")
	proto.RegisterType((*QueryTssHistoryRequest)(nil), "zetachain.zetacore.observer.QueryTssHistoryRequest")
	proto.RegisterType((*QueryTssHistoryResponse)(nil), "zetachain.zetacore.observer.QueryTssHistoryResponse")
	proto.RegisterType((*QueryHasVotedRequest)(nil), "zetachain.zetacore.observer.QueryHasVotedRequest")
	proto.RegisterType((*QueryHasVotedResponse)(nil), "zetachain.zetacore.observer.QueryHasVotedResponse")
	proto.RegisterType((*QueryBallotByIdentifierRequest)(nil), "zetachain.zetacore.observer.QueryBallotByIdentifierRequest")
	proto.RegisterType((*QueryBallotByIdentifierResponse)(nil), "zetachain.zetacore.observer.QueryBallotByIdentifierResponse")
	proto.RegisterType((*QueryObserverSet)(nil), "zetachain.zetacore.observer.QueryObserverSet")
	proto.RegisterType((*QueryObserverSetResponse)(nil), "zetachain.zetacore.observer.QueryObserverSetResponse")
	proto.RegisterType((*QuerySupportedChains)(nil), "zetachain.zetacore.observer.QuerySupportedChains")
	proto.RegisterType((*QuerySupportedChainsResponse)(nil), "zetachain.zetacore.observer.QuerySupportedChainsResponse")
	proto.RegisterType((*QueryGetChainParamsForChainRequest)(nil), "zetachain.zetacore.observer.QueryGetChainParamsForChainRequest")
	proto.RegisterType((*QueryGetChainParamsForChainResponse)(nil), "zetachain.zetacore.observer.QueryGetChainParamsForChainResponse")
	proto.RegisterType((*QueryGetChainParamsRequest)(nil), "zetachain.zetacore.observer.QueryGetChainParamsRequest")
	proto.RegisterType((*QueryGetChainParamsResponse)(nil), "zetachain.zetacore.observer.QueryGetChainParamsResponse")
	proto.RegisterType((*QueryGetNodeAccountRequest)(nil), "zetachain.zetacore.observer.QueryGetNodeAccountRequest")
	proto.RegisterType((*QueryGetNodeAccountResponse)(nil), "zetachain.zetacore.observer.QueryGetNodeAccountResponse")
	proto.RegisterType((*QueryAllNodeAccountRequest)(nil), "zetachain.zetacore.observer.QueryAllNodeAccountRequest")
	proto.RegisterType((*QueryAllNodeAccountResponse)(nil), "zetachain.zetacore.observer.QueryAllNodeAccountResponse")
	proto.RegisterType((*QueryGetCrosschainFlagsRequest)(nil), "zetachain.zetacore.observer.QueryGetCrosschainFlagsRequest")
	proto.RegisterType((*QueryGetCrosschainFlagsResponse)(nil), "zetachain.zetacore.observer.QueryGetCrosschainFlagsResponse")
	proto.RegisterType((*QueryGetKeygenRequest)(nil), "zetachain.zetacore.observer.QueryGetKeygenRequest")
	proto.RegisterType((*QueryGetKeygenResponse)(nil), "zetachain.zetacore.observer.QueryGetKeygenResponse")
	proto.RegisterType((*QueryShowObserverCountRequest)(nil), "zetachain.zetacore.observer.QueryShowObserverCountRequest")
	proto.RegisterType((*QueryShowObserverCountResponse)(nil), "zetachain.zetacore.observer.QueryShowObserverCountResponse")
	proto.RegisterType((*QueryBlameByIdentifierRequest)(nil), "zetachain.zetacore.observer.QueryBlameByIdentifierRequest")
	proto.RegisterType((*QueryBlameByIdentifierResponse)(nil), "zetachain.zetacore.observer.QueryBlameByIdentifierResponse")
	proto.RegisterType((*QueryAllBlameRecordsRequest)(nil), "zetachain.zetacore.observer.QueryAllBlameRecordsRequest")
	proto.RegisterType((*QueryAllBlameRecordsResponse)(nil), "zetachain.zetacore.observer.QueryAllBlameRecordsResponse")
	proto.RegisterType((*QueryBlameByChainAndNonceRequest)(nil), "zetachain.zetacore.observer.QueryBlameByChainAndNonceRequest")
	proto.RegisterType((*QueryBlameByChainAndNonceResponse)(nil), "zetachain.zetacore.observer.QueryBlameByChainAndNonceResponse")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/observer/query.proto", fileDescriptor_25b2aa420449a0c0)
}

var fileDescriptor_25b2aa420449a0c0 = []byte{
	// 2274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xcf, 0x6f, 0x1b, 0xc7,
	0x15, 0xf6, 0x4a, 0x89, 0x22, 0x8d, 0x6c, 0xfd, 0x18, 0xcb, 0xb6, 0x42, 0x3b, 0xb2, 0xbc, 0x92,
	0x63, 0x59, 0x96, 0xb8, 0xb6, 0xec, 0xd4, 0xbf, 0xe2, 0xda, 0xa2, 0x63, 0x49, 0x76, 0x12, 0xdb,
	0x21, 0xdd, 0x06, 0x30, 0xda, 0xb2, 0x4b, 0xee, 0x90, 0xdc, 0x7a, 0xb5, 0xc3, 0xec, 0x8c, 0x9c,
	0x30, 0xaa, 0x80, 0xa2, 0xb7, 0xe6, 0x50, 0x14, 0x28, 0xd0, 0xde, 0x8a, 0x02, 0x45, 0x8f, 0x05,
	0x8a, 0x00, 0x01, 0x0a, 0x14, 0x39, 0xe4, 0xd4, 0x1c, 0x7a, 0x48, 0xd1, 0xa2, 0xe8, 0xa9, 0x35,
	0xec, 0xfe, 0x21, 0xc5, 0xce, 0xbc, 0x25, 0x77, 0x97, 0xbb, 0xcb, 0x21, 0xad, 0x9e, 0xc8, 0x9d,
	0x9d, 0xf7, 0xe6, 0xfb, 0xde, 0xcc, 0xbc, 0xf9, 0x66, 0x66, 0xd1, 0x99, 0x4f, 0x09, 0x37, 0xab,
	0x0d, 0xd3, 0x76, 0x0d, 0xf1, 0x8f, 0x7a, 0xc4, 0xa0, 0x15, 0x46, 0xbc, 0xa7, 0xc4, 0x33, 0x3e,
	0xda, 0x21, 0x5e, 0x2b, 0xdf, 0xf4, 0x28, 0xa7, 0xf8, 0x78, 0xbb, 0x62, 0x3e, 0xa8, 0x98, 0x0f,
	0x2a, 0xe6, 0x96, 0xab, 0x94, 0x6d, 0x53, 0x66, 0x54, 0x4c, 0x46, 0xa4, 0x95, 0xf1, 0xf4, 0x42,
	0x85, 0x70, 0xf3, 0x82, 0xd1, 0x34, 0xeb, 0xb6, 0x6b, 0x72, 0x9b, 0xba, 0xd2, 0x51, 0x6e, 0xa6,
	0x4e, 0xeb, 0x54, 0xfc, 0x35, 0xfc, 0x7f, 0x50, 0x7a, 0xa2, 0x4e, 0x69, 0xdd, 0x21, 0x86, 0xd9,
	0xb4, 0x0d, 0xd3, 0x75, 0x29, 0x17, 0x26, 0x0c, 0xde, 0x2e, 0x65, 0xa1, 0xac, 0x98, 0x8e, 0x43,
	0x39, 0xd4, 0xcc, 0xe4, 0x53, 0x71, 0xcc, 0x6d, 0x02, 0x15, 0xf3, 0x59, 0x15, 0x45, 0x79, 0xd9,
	0xa5, 0x6e, 0x95, 0x04, 0x10, 0xd6, 0x32, 0xeb, 0x7b, 0x94, 0x31, 0x69, 0x54, 0x73, 0xcc, 0xba,
	0x12, 0xec, 0x27, 0xa4, 0x55, 0x27, 0xae, 0x0a, 0x1a, 0x97, 0x5a, 0xa4, 0x6c, 0x56, 0xab, 0x74,
	0xc7, 0x0d, 0x68, 0x2e, 0x67, 0xd5, 0x0f, 0xfe, 0xa8, 0xa0, 0x68, 0x9a, 0x9e, 0xb9, 0x1d, 0xe0,
	0x3d, 0x9f, 0x59, 0x93, 0xb8, 0x96, 0xed, 0xd6, 0xa3, 0x51, 0x39, 0x9d, 0x65, 0xc1, 0x19, 0xcb,
	0x80, 0xdb, 0x7c, 0x52, 0x97, 0x71, 0x66, 0xf0, 0xd3, 0xa3, 0x6e, 0xd3, 0xa3, 0xb4, 0xc6, 0xe0,
	0x07, 0xea, 0x5e, 0xea, 0xd1, 0x7c, 0xb9, 0xb6, 0xe3, 0x5a, 0xac, 0xbc, 0x6d, 0xd7, 0x3d, 0x93,
	0x53, 0x08, 0x88, 0x7e, 0x1a, 0x2d, 0x7c, 0xe0, 0x8f, 0xd1, 0x47, 0x8c, 0x6d, 0xf8, 0xef, 0xdf,
	0x87, 0xd7, 0x77, 0xdd, 0x1a, 0x5d, 0x77, 0x9c, 0x22, 0xf9, 0x68, 0x87, 0x30, 0xae, 0xff, 0x5c,
	0x43, 0x8b, 0xd9, 0xf5, 0x58, 0x93, 0xba, 0x8c, 0xe0, 0x1a, 0x3a, 0xdc, 0xdd, 0x16, 0x9b, 0xd5,
	0xe6, 0x87, 0x97, 0xc6, 0xd7, 0xce, 0xe7, 0x33, 0x26, 0x4e, 0x1e, 0x5c, 0x87, 0x3d, 0x17, 0x5e,
	0xf9, 0xfa, 0xdf, 0x27, 0x0f, 0x14, 0xa7, 0x79, 0xac, 0x55, 0xa6, 0xdf, 0x40, 0xf3, 0xa9, 0x78,
	0x00, 0x34, 0x7e, 0x1d, 0x8d, 0xca, 0x71, 0x68, 0x5b, 0xb3, 0xda, 0xbc, 0xb6, 0x34, 0x5c, 0x7c,
	0x4d, 0x3c, 0xdf, 0xb5, 0xf4, 0x9f, 0x69, 0xe8, 0x54, 0x86, 0x3d, 0x90, 0xb1, 0x10, 0xee, 0x26,
	0x23, 0x5c, 0x0d, 0xce, 0x65, 0x2a, 0xce, 0x45, 0xbf, 0x8c, 0x72, 0x02, 0xca, 0x26, 0xe1, 0xb7,
	0x7d, 0x77, 0xf7, 0xc5, 0xa0, 0x52, 0x20, 0x41, 0xd1, 0xf1, 0x44, 0x43, 0x40, 0xff, 0x10, 0x8d,
	0x87, 0x8a, 0x01, 0xf6, 0x52, 0x26, 0xec, 0x50, 0x7d, 0x80, 0x1b, 0x76, 0xa1, 0x5b, 0x80, 0x74,
	0xdd, 0x71, 0x12, 0x90, 0x6e, 0x20, 0xd4, 0x49, 0x70, 0xd0, 0xdc, 0x9b, 0x79, 0x99, 0x0d, 0xf3,
	0x7e, 0x36, 0xcc, 0xcb, 0x1c, 0x0a, 0xd9, 0x30, 0xff, 0xd0, 0xac, 0x13, 0xb0, 0x2d, 0x86, 0x2c,
	0xf5, 0x3f, 0x69, 0xc0, 0x2b, 0xde, 0x4c, 0x1a, 0xaf, 0xe1, 0x97, 0xe4, 0x85, 0x37, 0x23, 0xc8,
	0x87, 0x04, 0xf2, 0x33, 0x3d, 0x91, 0x4b, 0x38, 0x11, 0xe8, 0x35, 0x74, 0x22, 0x40, 0xfe, 0x50,
	0xa6, 0x88, 0xff, 0x4f, 0x88, 0xbe, 0xd2, 0xd0, 0x1b, 0x29, 0x0d, 0x41, 0x90, 0x3e, 0x44, 0x13,
	0xd1, 0x24, 0x05, 0x71, 0x5a, 0xce, 0x8c, 0x53, 0xc4, 0x17, 0x44, 0xea, 0x50, 0x33, 0x5c, 0xb8,
	0x7f, 0xb1, 0x0a, 0x66, 0x70, 0xb4, 0xcd, 0x96, 0xe8, 0x17, 0x85, 0xc1, 0xff, 0x63, 0x98, 0xc0,
	0xc9, 0xe6, 0x19, 0x51, 0xd0, 0xf6, 0x21, 0x0a, 0xfa, 0x0c, 0xc2, 0xc1, 0xd4, 0x7b, 0x54, 0x2a,
	0x05, 0x59, 0xf2, 0x01, 0x3a, 0x1c, 0x29, 0x05, 0x14, 0x57, 0xd0, 0xf0, 0xa3, 0x52, 0x09, 0x9a,
	0x9e, 0xcf, 0xce, 0x1b, 0xa5, 0x12, 0x34, 0xe8, 0x9b, 0xe8, 0x77, 0xd0, 0xeb, 0x6d, 0x87, 0x8c,
	0xad, 0x5b, 0x96, 0x47, 0x58, 0x7b, 0x30, 0x2d, 0xa1, 0xa9, 0x8a, 0xcd, 0xab, 0xd4, 0x76, 0xcb,
	0xed, 0x20, 0x0d, 0x89, 0x20, 0x4d, 0x40, 0xf9, 0x6d, 0x88, 0xd5, 0xad, 0x4e, 0x86, 0x09, 0xbb,
	0x01, 0x78, 0x53, 0x68, 0x98, 0xf0, 0x86, 0x80, 0x37, 0x56, 0xf4, 0xff, 0xfa, 0x25, 0x15, 0x5e,
	0x15, 0xce, 0xc6, 0x8a, 0xfe, 0x5f, 0xfd, 0x33, 0x0d, 0x2d, 0x77, 0xbb, 0x28, 0xb4, 0x36, 0x6c,
	0xd7, 0x74, 0xec, 0x4f, 0x89, 0xb5, 0x45, 0xec, 0x7a, 0x83, 0x07, 0xd0, 0xd6, 0xd0, 0x91, 0x5a,
	0xf0, 0xa6, 0xec, 0xb3, 0x2c, 0x37, 0xc4, 0x7b, 0xe8, 0xc4, 0xc3, 0xed, 0x97, 0x8f, 0x09, 0x37,
	0xa5, 0x69, 0x1f, 0x74, 0x3e, 0x40, 0xe7, 0x94, 0xb0, 0xf4, 0xc1, 0xef, 0x87, 0xe8, 0x68, 0xb0,
	0x1c, 0x6c, 0xd9, 0x8c, 0x53, 0xaf, 0xb5, 0xdf, 0x53, 0xf6, 0xf7, 0x1a, 0x3a, 0xd6, 0xd5, 0x04,
	0x20, 0x5c, 0x47, 0xa3, 0xfe, 0x3a, 0xe3, 0xd8, 0x8c, 0xc3, 0x34, 0x55, 0x1d, 0x25, 0xaf, 0x71,
	0xc6, 0xde, 0xb3, 0x19, 0xdf, 0xbf, 0x69, 0xd9, 0x40, 0x33, 0x02, 0xe6, 0x96, 0xc9, 0xbe, 0x4b,
	0x39, 0xb1, 0x82, 0x38, 0x9c, 0x43, 0xd3, 0x52, 0x5c, 0x96, 0x6d, 0x8b, 0xb8, 0xdc, 0xae, 0xd9,
	0xc4, 0x83, 0x98, 0x4e, 0xc9, 0x17, 0x77, 0xdb, 0xe5, 0x78, 0x01, 0x1d, 0x7a, 0x4a, 0x39, 0xf1,
	0xca, 0xa6, 0xec, 0x1c, 0x08, 0xf5, 0x41, 0x51, 0x08, 0x1d, 0xa6, 0x5f, 0x42, 0x47, 0x62, 0x2d,
	0x41, 0x38, 0x8e, 0xa3, 0xb1, 0x86, 0xc9, 0xca, 0x7e, 0x65, 0x39, 0xed, 0x47, 0x8b, 0xa3, 0x0d,
	0xa8, 0xa4, 0xbf, 0x8f, 0xe6, 0x84, 0x55, 0x41, 0xb4, 0x59, 0x68, 0x75, 0x5a, 0x1d, 0x04, 0xa9,
	0xfe, 0xe5, 0x10, 0x3a, 0x99, 0xea, 0x0f, 0xf0, 0xf4, 0x45, 0xfd, 0x1d, 0x34, 0x22, 0x58, 0xfa,
	0x9c, 0x87, 0xc5, 0x58, 0xc9, 0xea, 0x49, 0x9f, 0x93, 0xe7, 0x77, 0x20, 0xf4, 0x27, 0xd8, 0xe2,
	0x0f, 0xd1, 0x94, 0xac, 0x23, 0x3a, 0xa5, 0xcc, 0x5b, 0x4d, 0x32, 0x3b, 0x3c, 0xaf, 0x2d, 0x4d,
	0xac, 0xad, 0x64, 0xfa, 0x7b, 0xd0, 0x31, 0x7a, 0xd4, 0x6a, 0x92, 0xe2, 0x24, 0x8d, 0x16, 0xe0,
	0xfb, 0xe8, 0x10, 0x70, 0x61, 0xdc, 0xe4, 0x3b, 0x6c, 0xf6, 0x15, 0xe1, 0xf5, 0x6c, 0xa6, 0x57,
	0x19, 0x9b, 0x92, 0x30, 0x28, 0x1e, 0xac, 0x84, 0x9e, 0x74, 0x8c, 0xa6, 0x44, 0xf8, 0x1e, 0x40,
	0xdd, 0x12, 0xe1, 0xfa, 0x15, 0x34, 0x1b, 0x2f, 0x6b, 0xc7, 0xf2, 0x04, 0x1a, 0x0b, 0xdc, 0xca,
	0x25, 0x69, 0xac, 0xd8, 0x29, 0xd0, 0x8f, 0xc2, 0xe0, 0x2b, 0xed, 0x34, 0x9b, 0xd4, 0xe3, 0xc4,
	0x12, 0x53, 0x9e, 0xe9, 0x15, 0x58, 0x57, 0x63, 0xe5, 0x6d, 0xaf, 0x05, 0x34, 0x22, 0x75, 0x33,
	0x4c, 0x9f, 0xc5, 0x24, 0x3a, 0xcd, 0x27, 0xf5, 0x3c, 0xa8, 0x6b, 0x61, 0x1e, 0x84, 0x5c, 0x96,
	0xe9, 0x37, 0x91, 0x1e, 0x51, 0x53, 0x0f, 0xc5, 0x6e, 0x60, 0x83, 0x7a, 0xaa, 0x2b, 0x92, 0x07,
	0x52, 0x3a, 0xcd, 0x01, 0x60, 0x7d, 0x17, 0x1d, 0x94, 0x1e, 0xe4, 0x76, 0x43, 0x5d, 0x97, 0x49,
	0x7f, 0xc5, 0xf1, 0x6a, 0xe7, 0x41, 0x3f, 0x11, 0xd3, 0x8e, 0x50, 0x07, 0xd6, 0x23, 0x37, 0x26,
	0x10, 0x83, 0xb7, 0x80, 0xe4, 0x41, 0x22, 0x92, 0x15, 0x55, 0x24, 0xfe, 0xb0, 0x8d, 0xa2, 0x59,
	0xeb, 0xa0, 0xb9, 0x4f, 0x2d, 0xb2, 0x2e, 0xb7, 0x69, 0x41, 0xe8, 0x66, 0xd0, 0xab, 0xb6, 0x6b,
	0x91, 0x4f, 0x60, 0xea, 0xc8, 0x07, 0xfd, 0x47, 0x1d, 0x8c, 0x11, 0x9b, 0x4e, 0xb4, 0xc2, 0x5b,
	0x3e, 0xa5, 0x68, 0x85, 0xfd, 0x8c, 0xbb, 0x9d, 0x87, 0xb0, 0x7e, 0x4d, 0xc0, 0xb7, 0x5f, 0x99,
	0xfe, 0xf3, 0x90, 0x7e, 0x4d, 0xa2, 0x74, 0x0f, 0x8d, 0x87, 0x8a, 0x95, 0xf4, 0x6b, 0x84, 0x51,
	0xe8, 0x61, 0xff, 0xd2, 0xfe, 0x3c, 0xa4, 0x55, 0x7f, 0xa8, 0xb4, 0x37, 0xf0, 0x1b, 0xfe, 0xfe,
	0x3d, 0x18, 0x4c, 0x3f, 0xd1, 0x20, 0x53, 0x26, 0x55, 0x01, 0x6a, 0xdf, 0x47, 0x53, 0xf1, 0xed,
	0xbf, 0xda, 0xa8, 0x8a, 0xfa, 0x83, 0x99, 0x39, 0x59, 0x8d, 0x16, 0xeb, 0xc7, 0x60, 0xc5, 0xd8,
	0x24, 0xfc, 0x5d, 0x71, 0x62, 0x10, 0x60, 0xfb, 0x0e, 0x2c, 0xdf, 0xa1, 0x17, 0x80, 0xe8, 0x3a,
	0x1a, 0x91, 0x87, 0x0b, 0x80, 0x63, 0x21, 0x13, 0x07, 0x18, 0x83, 0x89, 0x7e, 0x12, 0x54, 0x76,
	0xa9, 0x41, 0x3f, 0x0e, 0x92, 0xd9, 0xed, 0xd0, 0x90, 0xf1, 0x63, 0x32, 0x97, 0x56, 0x03, 0x00,
	0xfc, 0x00, 0x1d, 0x76, 0x4c, 0xc6, 0xcb, 0x41, 0x1b, 0xe5, 0xf0, 0x38, 0xce, 0x67, 0xa2, 0x79,
	0xcf, 0x64, 0x3c, 0xea, 0x74, 0xda, 0x89, 0x17, 0xe9, 0xf7, 0x00, 0x63, 0xc1, 0x31, 0xb7, 0x49,
	0xd2, 0x72, 0x78, 0x16, 0x4d, 0x89, 0xb3, 0x9e, 0xee, 0xc5, 0x6b, 0x52, 0x94, 0x87, 0x16, 0xc3,
	0x6a, 0xb0, 0xb6, 0x76, 0xfb, 0x6a, 0x2b, 0x15, 0x04, 0xce, 0xdc, 0x1a, 0x05, 0x12, 0x7a, 0xf6,
	0xda, 0xe1, 0x57, 0x2f, 0x8e, 0xc9, 0xa6, 0xdc, 0x1a, 0xd5, 0x49, 0x67, 0x76, 0xc8, 0x77, 0xa4,
	0x4a, 0x3d, 0x6b, 0xdf, 0xb7, 0x48, 0x7f, 0xd4, 0x3a, 0x7b, 0xb1, 0x68, 0x3b, 0x40, 0x65, 0x33,
	0x46, 0x65, 0x58, 0x8d, 0x0a, 0x8c, 0xcd, 0x0e, 0xa1, 0xfd, 0x9b, 0x83, 0x25, 0xd8, 0x11, 0x41,
	0xf8, 0x45, 0xaa, 0x5d, 0x77, 0x2d, 0xb1, 0xe5, 0xe8, 0xbd, 0xfe, 0xf8, 0xf9, 0x55, 0x6c, 0x72,
	0x40, 0x35, 0xcb, 0x07, 0xbd, 0x06, 0xfb, 0xa4, 0x64, 0xa7, 0x29, 0xdd, 0x3a, 0xdc, 0x77, 0xb7,
	0xae, 0xfd, 0x6e, 0x11, 0xbd, 0x2a, 0x1a, 0xc2, 0x5f, 0x6a, 0x68, 0x34, 0xd0, 0x74, 0xf8, 0x42,
	0xa6, 0x97, 0x24, 0xa5, 0x99, 0x5b, 0xeb, 0xc7, 0x44, 0x12, 0xd0, 0xef, 0xfd, 0xf4, 0xef, 0xff,
	0xfd, 0xe5, 0xd0, 0x3b, 0xb8, 0x20, 0xce, 0xbe, 0x56, 0xe5, 0x31, 0x58, 0xfb, 0xf4, 0xab, 0xad,
	0x26, 0x8d, 0xdd, 0x2e, 0x21, 0xb7, 0x67, 0xec, 0x46, 0xa4, 0xea, 0x1e, 0xfe, 0xa7, 0x86, 0x70,
	0xb7, 0x1a, 0xc4, 0xd7, 0x7b, 0xc3, 0x4a, 0xd5, 0xa4, 0xb9, 0xb7, 0x07, 0x33, 0x06, 0x76, 0x77,
	0x04, 0xbb, 0x9b, 0xf8, 0x46, 0x22, 0x3b, 0xa0, 0x54, 0x69, 0x85, 0x58, 0x25, 0x11, 0xc5, 0xbf,
	0xd1, 0xd0, 0x78, 0x48, 0x93, 0xe1, 0xd5, 0xde, 0xa0, 0x42, 0xd5, 0x73, 0x6f, 0xf5, 0x55, 0xbd,
	0x0d, 0xfe, 0xac, 0x00, 0xbf, 0x80, 0x4f, 0x25, 0x82, 0x6f, 0xa7, 0x45, 0x46, 0x38, 0xfe, 0x83,
	0x86, 0x26, 0x63, 0x12, 0x4f, 0x65, 0x00, 0xc5, 0x4c, 0x72, 0x57, 0xfb, 0x36, 0x69, 0x83, 0x5d,
	0x11, 0x60, 0xdf, 0xc4, 0x8b, 0x89, 0x60, 0x59, 0x0c, 0xdb, 0x7f, 0x34, 0x74, 0x34, 0x59, 0xed,
	0xe1, 0x9b, 0xbd, 0x31, 0x64, 0x0a, 0xcd, 0xdc, 0xad, 0xc1, 0x1d, 0x00, 0x97, 0x82, 0xe0, 0xf2,
	0x36, 0xbe, 0x96, 0xc8, 0xa5, 0x4e, 0x78, 0x39, 0xac, 0xfe, 0xca, 0x35, 0xea, 0xc9, 0x02, 0x63,
	0x37, 0xc8, 0x30, 0x7b, 0xf8, 0x73, 0x0d, 0x4d, 0x44, 0x9b, 0xc1, 0x97, 0xfb, 0x05, 0x16, 0x30,
	0xba, 0xd2, 0xbf, 0x21, 0x30, 0x59, 0x15, 0x4c, 0xce, 0xe0, 0xd3, 0x4a, 0x4c, 0x7c, 0xd0, 0x11,
	0x91, 0xa4, 0x86, 0xb8, 0x5b, 0x11, 0x2a, 0x22, 0x4e, 0xd0, 0x78, 0xfa, 0x79, 0x81, 0x78, 0x19,
	0x2f, 0x25, 0x22, 0x0e, 0x69, 0x52, 0x63, 0x57, 0xc8, 0xe0, 0x3d, 0x7f, 0xec, 0x4f, 0x84, 0x3c,
	0xad, 0x3b, 0x8e, 0x0a, 0xee, 0x44, 0x25, 0xab, 0x82, 0x3b, 0x59, 0x9b, 0xea, 0x4b, 0x02, 0xb7,
	0x8e, 0xe7, 0x7b, 0xe1, 0xc6, 0x7f, 0xd6, 0xd0, 0x64, 0x4c, 0xb6, 0xa9, 0xa4, 0xc8, 0x54, 0x7d,
	0xa9, 0x92, 0x22, 0xd3, 0x95, 0x67, 0x8f, 0x21, 0x12, 0x17, 0xa5, 0xf8, 0x57, 0x1a, 0x1a, 0x91,
	0x62, 0x0f, 0xaf, 0x29, 0xb5, 0x1b, 0xd1, 0x9b, 0xb9, 0x8b, 0x7d, 0xd9, 0x00, 0xc4, 0x05, 0x01,
	0xf1, 0x0d, 0x7c, 0x3c, 0x11, 0xa2, 0x94, 0x9c, 0xf8, 0x2f, 0x1a, 0x9a, 0xee, 0x12, 0x93, 0xf8,
	0x9a, 0x42, 0x46, 0x4b, 0xd1, 0xa8, 0xb9, 0xeb, 0x03, 0xd9, 0x02, 0xe6, 0xab, 0x02, 0xf3, 0x45,
	0x7c, 0x21, 0x8c, 0xb9, 0xfb, 0x7a, 0x89, 0x35, 0xe8, 0xc7, 0x31, 0x85, 0x8b, 0xff, 0xa6, 0xa1,
	0xe9, 0x2e, 0x21, 0xa9, 0xc2, 0x24, 0x4d, 0xc9, 0xaa, 0x30, 0x49, 0x55, 0xae, 0xfa, 0x6d, 0xc1,
	0xe4, 0x06, 0xbe, 0x9e, 0xbc, 0x86, 0x0a, 0xf5, 0x13, 0x5f, 0x42, 0x63, 0xb2, 0x79, 0xcf, 0x97,
	0x36, 0x78, 0x93, 0xf0, 0x98, 0xa4, 0xc4, 0x6a, 0xf3, 0x2d, 0x41, 0xed, 0xaa, 0x2c, 0x55, 0x29,
	0xfa, 0x55, 0x5f, 0x13, 0x84, 0x56, 0xf0, 0x72, 0x6a, 0x52, 0x34, 0x1d, 0xa7, 0x2c, 0x39, 0x78,
	0x00, 0xf4, 0x99, 0x86, 0x8e, 0x08, 0x67, 0x2c, 0xa6, 0x04, 0xf1, 0x0d, 0xe5, 0xd8, 0x26, 0xc9,
	0xd2, 0xdc, 0xb7, 0x07, 0x35, 0x07, 0x32, 0x5b, 0x82, 0x4c, 0x01, 0xdf, 0xca, 0xee, 0x1d, 0x39,
	0x85, 0x4d, 0xd7, 0x92, 0xc7, 0xf9, 0xa1, 0x95, 0xca, 0xd8, 0x15, 0x25, 0x7b, 0xf8, 0x2b, 0x0d,
	0x1d, 0x8a, 0x1c, 0x0c, 0xe3, 0x6f, 0x29, 0x4d, 0xd6, 0xae, 0xf3, 0xf5, 0xdc, 0xe5, 0xbe, 0xed,
	0x80, 0xcc, 0x4d, 0x41, 0xe6, 0x2a, 0xbe, 0x9c, 0xda, 0x33, 0x9c, 0xb1, 0x40, 0x6f, 0x1a, 0xbb,
	0xf1, 0x53, 0xef, 0x3d, 0xfc, 0xeb, 0x21, 0x34, 0x97, 0x7d, 0xb8, 0x8d, 0x37, 0xfb, 0x04, 0x97,
	0x76, 0x54, 0x9f, 0xdb, 0x7a, 0x79, 0x47, 0x40, 0xbb, 0x22, 0x68, 0x7f, 0x0f, 0x3f, 0x56, 0xa1,
	0x5d, 0x6e, 0x88, 0x33, 0x70, 0xbb, 0x6a, 0x3a, 0xc6, 0x6e, 0xe2, 0x5d, 0xc1, 0x5e, 0x52, 0x64,
	0x3e, 0xd3, 0xc4, 0x5d, 0x0a, 0x36, 0xd4, 0x50, 0xb7, 0xaf, 0x66, 0x72, 0xe7, 0xd5, 0x0d, 0x80,
	0xce, 0xbc, 0xa0, 0x93, 0xc3, 0xb3, 0x89, 0x74, 0x7c, 0x10, 0xbf, 0xd5, 0x10, 0xea, 0x9c, 0xe6,
	0x63, 0x85, 0x45, 0xa1, 0xeb, 0x7a, 0x21, 0x77, 0xa9, 0x3f, 0x23, 0xc0, 0x76, 0x46, 0x60, 0x3b,
	0x85, 0x4f, 0x26, 0x62, 0xe3, 0x1d, 0x4c, 0x5f, 0x68, 0x68, 0x2a, 0x72, 0x9d, 0xe5, 0xeb, 0x0a,
	0xb5, 0xa4, 0x93, 0x74, 0x81, 0x99, 0xbb, 0x36, 0x88, 0x29, 0x80, 0x5e, 0x16, 0xa0, 0x17, 0xb1,
	0x9e, 0x08, 0x3a, 0x7a, 0xcb, 0xf8, 0x57, 0x0d, 0xcd, 0x24, 0xdd, 0xec, 0xa9, 0xe4, 0xa9, 0x8c,
	0x0b, 0x45, 0x95, 0x3c, 0x95, 0x75, 0xa1, 0xa8, 0xbf, 0x25, 0x38, 0x18, 0x78, 0xb5, 0x37, 0x87,
	0xb0, 0x8c, 0xfe, 0x42, 0x8b, 0xdc, 0x59, 0xf7, 0xa3, 0xa1, 0xa3, 0xf1, 0xbf, 0xd2, 0xbf, 0x21,
	0x20, 0xbf, 0x28, 0x90, 0xaf, 0xe2, 0x73, 0xc9, 0x02, 0xa9, 0x63, 0x11, 0xc6, 0xed, 0x8b, 0xd2,
	0x90, 0x33, 0x75, 0x51, 0x3a, 0x18, 0xf4, 0xe4, 0x0b, 0xff, 0x1e, 0xa2, 0x34, 0x04, 0xdd, 0x57,
	0x4f, 0x33, 0x49, 0x5f, 0x74, 0xa8, 0x0c, 0x9b, 0x8c, 0x2f, 0x49, 0x54, 0x86, 0x4d, 0xd6, 0x87,
	0x24, 0x3d, 0xb6, 0x03, 0x75, 0x91, 0x5f, 0x23, 0xd6, 0xf8, 0x1f, 0x1a, 0x3a, 0x96, 0xf2, 0xad,
	0x0d, 0xbe, 0x35, 0x18, 0x9a, 0xce, 0xe7, 0x3c, 0xb9, 0xf5, 0x97, 0xf0, 0x00, 0x94, 0x2e, 0x09,
	0x4a, 0x79, 0xbc, 0x92, 0x46, 0x69, 0xdd, 0x71, 0xe2, 0x3e, 0x58, 0xe1, 0xce, 0xd7, 0xcf, 0xe7,
	0xb4, 0x6f, 0x9e, 0xcf, 0x69, 0xcf, 0x9e, 0xcf, 0x69, 0xbf, 0x78, 0x31, 0x77, 0xe0, 0x9b, 0x17,
	0x73, 0x07, 0xfe, 0xf5, 0x62, 0xee, 0xc0, 0xe3, 0x73, 0x75, 0x9b, 0x37, 0x76, 0x2a, 0xf9, 0x2a,
	0xdd, 0x0e, 0x7b, 0xf4, 0xb7, 0x1c, 0xc6, 0x27, 0xa1, 0xdc, 0xd6, 0x6a, 0x12, 0x56, 0x19, 0x11,
	0x1f, 0x2f, 0x5d, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x87, 0xac, 0x67, 0xb2, 0x27,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Query if a voter has voted for a ballot
	HasVoted(ctx context.Context, in *QueryHasVotedRequest, opts ...grpc.CallOption) (*QueryHasVotedResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserverSet(ctx context.Context, in *QueryObserverSet, opts ...grpc.CallOption) (*QueryObserverSetResponse, error)
	SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error)
	// Queries a list of GetChainParamsForChain items.
	GetChainParamsForChain(ctx context.Context, in *QueryGetChainParamsForChainRequest, opts ...grpc.CallOption) (*QueryGetChainParamsForChainResponse, error)
	// Queries a list of GetChainParams items.
	GetChainParams(ctx context.Context, in *QueryGetChainParamsRequest, opts ...grpc.CallOption) (*QueryGetChainParamsResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error)
	CrosschainFlags(ctx context.Context, in *QueryGetCrosschainFlagsRequest, opts ...grpc.CallOption) (*QueryGetCrosschainFlagsResponse, error)
	// Queries a keygen by index.
	Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryGetKeygenResponse, error)
	// Queries a list of ShowObserverCount items.
	ShowObserverCount(ctx context.Context, in *QueryShowObserverCountRequest, opts ...grpc.CallOption) (*QueryShowObserverCountResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlameByIdentifier(ctx context.Context, in *QueryBlameByIdentifierRequest, opts ...grpc.CallOption) (*QueryBlameByIdentifierResponse, error)
	// Queries a list of VoterByIdentifier items.
	GetAllBlameRecords(ctx context.Context, in *QueryAllBlameRecordsRequest, opts ...grpc.CallOption) (*QueryAllBlameRecordsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlamesByChainAndNonce(ctx context.Context, in *QueryBlameByChainAndNonceRequest, opts ...grpc.CallOption) (*QueryBlameByChainAndNonceResponse, error)
	// Queries a list of GetTssAddress items.
	GetTssAddress(ctx context.Context, in *QueryGetTssAddressRequest, opts ...grpc.CallOption) (*QueryGetTssAddressResponse, error)
	GetTssAddressByFinalizedHeight(ctx context.Context, in *QueryGetTssAddressByFinalizedHeightRequest, opts ...grpc.CallOption) (*QueryGetTssAddressByFinalizedHeightResponse, error)
	// Queries a tSS by index.
	TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryGetTSSResponse, error)
	TssHistory(ctx context.Context, in *QueryTssHistoryRequest, opts ...grpc.CallOption) (*QueryTssHistoryResponse, error)
	PendingNoncesAll(ctx context.Context, in *QueryAllPendingNoncesRequest, opts ...grpc.CallOption) (*QueryAllPendingNoncesResponse, error)
	PendingNoncesByChain(ctx context.Context, in *QueryPendingNoncesByChainRequest, opts ...grpc.CallOption) (*QueryPendingNoncesByChainResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryGetChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryAllChainNoncesResponse, error)
	// Queries the TssFundMigratorInfo for a specific chain
	TssFundsMigratorInfo(ctx context.Context, in *QueryTssFundsMigratorInfoRequest, opts ...grpc.CallOption) (*QueryTssFundsMigratorInfoResponse, error)
	// Queries all TssFundMigratorInfo
	TssFundsMigratorInfoAll(ctx context.Context, in *QueryTssFundsMigratorInfoAllRequest, opts ...grpc.CallOption) (*QueryTssFundsMigratorInfoAllResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) HasVoted(ctx context.Context, in *QueryHasVotedRequest, opts ...grpc.CallOption) (*QueryHasVotedResponse, error) {
	out := new(QueryHasVotedResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/HasVoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error) {
	out := new(QueryBallotByIdentifierResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/BallotByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObserverSet(ctx context.Context, in *QueryObserverSet, opts ...grpc.CallOption) (*QueryObserverSetResponse, error) {
	out := new(QueryObserverSetResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/ObserverSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error) {
	out := new(QuerySupportedChainsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/SupportedChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChainParamsForChain(ctx context.Context, in *QueryGetChainParamsForChainRequest, opts ...grpc.CallOption) (*QueryGetChainParamsForChainResponse, error) {
	out := new(QueryGetChainParamsForChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/GetChainParamsForChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChainParams(ctx context.Context, in *QueryGetChainParamsRequest, opts ...grpc.CallOption) (*QueryGetChainParamsResponse, error) {
	out := new(QueryGetChainParamsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/GetChainParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error) {
	out := new(QueryGetNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/NodeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error) {
	out := new(QueryAllNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/NodeAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainFlags(ctx context.Context, in *QueryGetCrosschainFlagsRequest, opts ...grpc.CallOption) (*QueryGetCrosschainFlagsResponse, error) {
	out := new(QueryGetCrosschainFlagsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/CrosschainFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryGetKeygenResponse, error) {
	out := new(QueryGetKeygenResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/Keygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowObserverCount(ctx context.Context, in *QueryShowObserverCountRequest, opts ...grpc.CallOption) (*QueryShowObserverCountResponse, error) {
	out := new(QueryShowObserverCountResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/ShowObserverCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlameByIdentifier(ctx context.Context, in *QueryBlameByIdentifierRequest, opts ...grpc.CallOption) (*QueryBlameByIdentifierResponse, error) {
	out := new(QueryBlameByIdentifierResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/BlameByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllBlameRecords(ctx context.Context, in *QueryAllBlameRecordsRequest, opts ...grpc.CallOption) (*QueryAllBlameRecordsResponse, error) {
	out := new(QueryAllBlameRecordsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/GetAllBlameRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlamesByChainAndNonce(ctx context.Context, in *QueryBlameByChainAndNonceRequest, opts ...grpc.CallOption) (*QueryBlameByChainAndNonceResponse, error) {
	out := new(QueryBlameByChainAndNonceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/BlamesByChainAndNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTssAddress(ctx context.Context, in *QueryGetTssAddressRequest, opts ...grpc.CallOption) (*QueryGetTssAddressResponse, error) {
	out := new(QueryGetTssAddressResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/GetTssAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTssAddressByFinalizedHeight(ctx context.Context, in *QueryGetTssAddressByFinalizedHeightRequest, opts ...grpc.CallOption) (*QueryGetTssAddressByFinalizedHeightResponse, error) {
	out := new(QueryGetTssAddressByFinalizedHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/GetTssAddressByFinalizedHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryGetTSSResponse, error) {
	out := new(QueryGetTSSResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/TSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TssHistory(ctx context.Context, in *QueryTssHistoryRequest, opts ...grpc.CallOption) (*QueryTssHistoryResponse, error) {
	out := new(QueryTssHistoryResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/TssHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingNoncesAll(ctx context.Context, in *QueryAllPendingNoncesRequest, opts ...grpc.CallOption) (*QueryAllPendingNoncesResponse, error) {
	out := new(QueryAllPendingNoncesResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/PendingNoncesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingNoncesByChain(ctx context.Context, in *QueryPendingNoncesByChainRequest, opts ...grpc.CallOption) (*QueryPendingNoncesByChainResponse, error) {
	out := new(QueryPendingNoncesByChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/PendingNoncesByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryGetChainNoncesResponse, error) {
	out := new(QueryGetChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/ChainNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryAllChainNoncesResponse, error) {
	out := new(QueryAllChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/ChainNoncesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TssFundsMigratorInfo(ctx context.Context, in *QueryTssFundsMigratorInfoRequest, opts ...grpc.CallOption) (*QueryTssFundsMigratorInfoResponse, error) {
	out := new(QueryTssFundsMigratorInfoResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/TssFundsMigratorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TssFundsMigratorInfoAll(ctx context.Context, in *QueryTssFundsMigratorInfoAllRequest, opts ...grpc.CallOption) (*QueryTssFundsMigratorInfoAllResponse, error) {
	out := new(QueryTssFundsMigratorInfoAllResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Query/TssFundsMigratorInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Query if a voter has voted for a ballot
	HasVoted(context.Context, *QueryHasVotedRequest) (*QueryHasVotedResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(context.Context, *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserverSet(context.Context, *QueryObserverSet) (*QueryObserverSetResponse, error)
	SupportedChains(context.Context, *QuerySupportedChains) (*QuerySupportedChainsResponse, error)
	// Queries a list of GetChainParamsForChain items.
	GetChainParamsForChain(context.Context, *QueryGetChainParamsForChainRequest) (*QueryGetChainParamsForChainResponse, error)
	// Queries a list of GetChainParams items.
	GetChainParams(context.Context, *QueryGetChainParamsRequest) (*QueryGetChainParamsResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(context.Context, *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(context.Context, *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error)
	CrosschainFlags(context.Context, *QueryGetCrosschainFlagsRequest) (*QueryGetCrosschainFlagsResponse, error)
	// Queries a keygen by index.
	Keygen(context.Context, *QueryGetKeygenRequest) (*QueryGetKeygenResponse, error)
	// Queries a list of ShowObserverCount items.
	ShowObserverCount(context.Context, *QueryShowObserverCountRequest) (*QueryShowObserverCountResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlameByIdentifier(context.Context, *QueryBlameByIdentifierRequest) (*QueryBlameByIdentifierResponse, error)
	// Queries a list of VoterByIdentifier items.
	GetAllBlameRecords(context.Context, *QueryAllBlameRecordsRequest) (*QueryAllBlameRecordsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BlamesByChainAndNonce(context.Context, *QueryBlameByChainAndNonceRequest) (*QueryBlameByChainAndNonceResponse, error)
	// Queries a list of GetTssAddress items.
	GetTssAddress(context.Context, *QueryGetTssAddressRequest) (*QueryGetTssAddressResponse, error)
	GetTssAddressByFinalizedHeight(context.Context, *QueryGetTssAddressByFinalizedHeightRequest) (*QueryGetTssAddressByFinalizedHeightResponse, error)
	// Queries a tSS by index.
	TSS(context.Context, *QueryGetTSSRequest) (*QueryGetTSSResponse, error)
	TssHistory(context.Context, *QueryTssHistoryRequest) (*QueryTssHistoryResponse, error)
	PendingNoncesAll(context.Context, *QueryAllPendingNoncesRequest) (*QueryAllPendingNoncesResponse, error)
	PendingNoncesByChain(context.Context, *QueryPendingNoncesByChainRequest) (*QueryPendingNoncesByChainResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(context.Context, *QueryGetChainNoncesRequest) (*QueryGetChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(context.Context, *QueryAllChainNoncesRequest) (*QueryAllChainNoncesResponse, error)
	// Queries the TssFundMigratorInfo for a specific chain
	TssFundsMigratorInfo(context.Context, *QueryTssFundsMigratorInfoRequest) (*QueryTssFundsMigratorInfoResponse, error)
	// Queries all TssFundMigratorInfo
	TssFundsMigratorInfoAll(context.Context, *QueryTssFundsMigratorInfoAllRequest) (*QueryTssFundsMigratorInfoAllResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) HasVoted(ctx context.Context, req *QueryHasVotedRequest) (*QueryHasVotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasVoted not implemented")
}
func (*UnimplementedQueryServer) BallotByIdentifier(ctx context.Context, req *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BallotByIdentifier not implemented")
}
func (*UnimplementedQueryServer) ObserverSet(ctx context.Context, req *QueryObserverSet) (*QueryObserverSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObserverSet not implemented")
}
func (*UnimplementedQueryServer) SupportedChains(ctx context.Context, req *QuerySupportedChains) (*QuerySupportedChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedChains not implemented")
}
func (*UnimplementedQueryServer) GetChainParamsForChain(ctx context.Context, req *QueryGetChainParamsForChainRequest) (*QueryGetChainParamsForChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainParamsForChain not implemented")
}
func (*UnimplementedQueryServer) GetChainParams(ctx context.Context, req *QueryGetChainParamsRequest) (*QueryGetChainParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainParams not implemented")
}
func (*UnimplementedQueryServer) NodeAccount(ctx context.Context, req *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccount not implemented")
}
func (*UnimplementedQueryServer) NodeAccountAll(ctx context.Context, req *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccountAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainFlags(ctx context.Context, req *QueryGetCrosschainFlagsRequest) (*QueryGetCrosschainFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainFlags not implemented")
}
func (*UnimplementedQueryServer) Keygen(ctx context.Context, req *QueryGetKeygenRequest) (*QueryGetKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (*UnimplementedQueryServer) ShowObserverCount(ctx context.Context, req *QueryShowObserverCountRequest) (*QueryShowObserverCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowObserverCount not implemented")
}
func (*UnimplementedQueryServer) BlameByIdentifier(ctx context.Context, req *QueryBlameByIdentifierRequest) (*QueryBlameByIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlameByIdentifier not implemented")
}
func (*UnimplementedQueryServer) GetAllBlameRecords(ctx context.Context, req *QueryAllBlameRecordsRequest) (*QueryAllBlameRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlameRecords not implemented")
}
func (*UnimplementedQueryServer) BlamesByChainAndNonce(ctx context.Context, req *QueryBlameByChainAndNonceRequest) (*QueryBlameByChainAndNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlamesByChainAndNonce not implemented")
}
func (*UnimplementedQueryServer) GetTssAddress(ctx context.Context, req *QueryGetTssAddressRequest) (*QueryGetTssAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTssAddress not implemented")
}
func (*UnimplementedQueryServer) GetTssAddressByFinalizedHeight(ctx context.Context, req *QueryGetTssAddressByFinalizedHeightRequest) (*QueryGetTssAddressByFinalizedHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTssAddressByFinalizedHeight not implemented")
}
func (*UnimplementedQueryServer) TSS(ctx context.Context, req *QueryGetTSSRequest) (*QueryGetTSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSS not implemented")
}
func (*UnimplementedQueryServer) TssHistory(ctx context.Context, req *QueryTssHistoryRequest) (*QueryTssHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssHistory not implemented")
}
func (*UnimplementedQueryServer) PendingNoncesAll(ctx context.Context, req *QueryAllPendingNoncesRequest) (*QueryAllPendingNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingNoncesAll not implemented")
}
func (*UnimplementedQueryServer) PendingNoncesByChain(ctx context.Context, req *QueryPendingNoncesByChainRequest) (*QueryPendingNoncesByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingNoncesByChain not implemented")
}
func (*UnimplementedQueryServer) ChainNonces(ctx context.Context, req *QueryGetChainNoncesRequest) (*QueryGetChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNonces not implemented")
}
func (*UnimplementedQueryServer) ChainNoncesAll(ctx context.Context, req *QueryAllChainNoncesRequest) (*QueryAllChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNoncesAll not implemented")
}
func (*UnimplementedQueryServer) TssFundsMigratorInfo(ctx context.Context, req *QueryTssFundsMigratorInfoRequest) (*QueryTssFundsMigratorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssFundsMigratorInfo not implemented")
}
func (*UnimplementedQueryServer) TssFundsMigratorInfoAll(ctx context.Context, req *QueryTssFundsMigratorInfoAllRequest) (*QueryTssFundsMigratorInfoAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssFundsMigratorInfoAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_HasVoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHasVotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HasVoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/HasVoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HasVoted(ctx, req.(*QueryHasVotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BallotByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBallotByIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BallotByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/BallotByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BallotByIdentifier(ctx, req.(*QueryBallotByIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObserverSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObserverSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObserverSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/ObserverSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObserverSet(ctx, req.(*QueryObserverSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupportedChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupportedChains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupportedChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/SupportedChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupportedChains(ctx, req.(*QuerySupportedChains))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChainParamsForChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainParamsForChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChainParamsForChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/GetChainParamsForChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChainParamsForChain(ctx, req.(*QueryGetChainParamsForChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChainParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChainParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/GetChainParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChainParams(ctx, req.(*QueryGetChainParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/NodeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccount(ctx, req.(*QueryGetNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/NodeAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccountAll(ctx, req.(*QueryAllNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/CrosschainFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainFlags(ctx, req.(*QueryGetCrosschainFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/Keygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keygen(ctx, req.(*QueryGetKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowObserverCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowObserverCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowObserverCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/ShowObserverCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowObserverCount(ctx, req.(*QueryShowObserverCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlameByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlameByIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlameByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/BlameByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlameByIdentifier(ctx, req.(*QueryBlameByIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllBlameRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlameRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBlameRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/GetAllBlameRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBlameRecords(ctx, req.(*QueryAllBlameRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlamesByChainAndNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlameByChainAndNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlamesByChainAndNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/BlamesByChainAndNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlamesByChainAndNonce(ctx, req.(*QueryBlameByChainAndNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTssAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTssAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTssAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/GetTssAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTssAddress(ctx, req.(*QueryGetTssAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTssAddressByFinalizedHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTssAddressByFinalizedHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTssAddressByFinalizedHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/GetTssAddressByFinalizedHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTssAddressByFinalizedHeight(ctx, req.(*QueryGetTssAddressByFinalizedHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/TSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSS(ctx, req.(*QueryGetTSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TssHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTssHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TssHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/TssHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TssHistory(ctx, req.(*QueryTssHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingNoncesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingNoncesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/PendingNoncesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingNoncesAll(ctx, req.(*QueryAllPendingNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingNoncesByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingNoncesByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingNoncesByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/PendingNoncesByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingNoncesByChain(ctx, req.(*QueryPendingNoncesByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/ChainNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNonces(ctx, req.(*QueryGetChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNoncesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNoncesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/ChainNoncesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNoncesAll(ctx, req.(*QueryAllChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TssFundsMigratorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTssFundsMigratorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TssFundsMigratorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/TssFundsMigratorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TssFundsMigratorInfo(ctx, req.(*QueryTssFundsMigratorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TssFundsMigratorInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTssFundsMigratorInfoAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TssFundsMigratorInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Query/TssFundsMigratorInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TssFundsMigratorInfoAll(ctx, req.(*QueryTssFundsMigratorInfoAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.observer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasVoted",
			Handler:    _Query_HasVoted_Handler,
		},
		{
			MethodName: "BallotByIdentifier",
			Handler:    _Query_BallotByIdentifier_Handler,
		},
		{
			MethodName: "ObserverSet",
			Handler:    _Query_ObserverSet_Handler,
		},
		{
			MethodName: "SupportedChains",
			Handler:    _Query_SupportedChains_Handler,
		},
		{
			MethodName: "GetChainParamsForChain",
			Handler:    _Query_GetChainParamsForChain_Handler,
		},
		{
			MethodName: "GetChainParams",
			Handler:    _Query_GetChainParams_Handler,
		},
		{
			MethodName: "NodeAccount",
			Handler:    _Query_NodeAccount_Handler,
		},
		{
			MethodName: "NodeAccountAll",
			Handler:    _Query_NodeAccountAll_Handler,
		},
		{
			MethodName: "CrosschainFlags",
			Handler:    _Query_CrosschainFlags_Handler,
		},
		{
			MethodName: "Keygen",
			Handler:    _Query_Keygen_Handler,
		},
		{
			MethodName: "ShowObserverCount",
			Handler:    _Query_ShowObserverCount_Handler,
		},
		{
			MethodName: "BlameByIdentifier",
			Handler:    _Query_BlameByIdentifier_Handler,
		},
		{
			MethodName: "GetAllBlameRecords",
			Handler:    _Query_GetAllBlameRecords_Handler,
		},
		{
			MethodName: "BlamesByChainAndNonce",
			Handler:    _Query_BlamesByChainAndNonce_Handler,
		},
		{
			MethodName: "GetTssAddress",
			Handler:    _Query_GetTssAddress_Handler,
		},
		{
			MethodName: "GetTssAddressByFinalizedHeight",
			Handler:    _Query_GetTssAddressByFinalizedHeight_Handler,
		},
		{
			MethodName: "TSS",
			Handler:    _Query_TSS_Handler,
		},
		{
			MethodName: "TssHistory",
			Handler:    _Query_TssHistory_Handler,
		},
		{
			MethodName: "PendingNoncesAll",
			Handler:    _Query_PendingNoncesAll_Handler,
		},
		{
			MethodName: "PendingNoncesByChain",
			Handler:    _Query_PendingNoncesByChain_Handler,
		},
		{
			MethodName: "ChainNonces",
			Handler:    _Query_ChainNonces_Handler,
		},
		{
			MethodName: "ChainNoncesAll",
			Handler:    _Query_ChainNoncesAll_Handler,
		},
		{
			MethodName: "TssFundsMigratorInfo",
			Handler:    _Query_TssFundsMigratorInfo_Handler,
		},
		{
			MethodName: "TssFundsMigratorInfoAll",
			Handler:    _Query_TssFundsMigratorInfoAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetachain/zetacore/observer/query.proto",
}

func (m *QueryTssFundsMigratorInfoAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssFundsMigratorInfoAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssFundsMigratorInfoAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTssFundsMigratorInfoAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssFundsMigratorInfoAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssFundsMigratorInfoAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TssFundsMigrators) > 0 {
		for iNdEx := len(m.TssFundsMigrators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TssFundsMigrators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssFundsMigratorInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssFundsMigratorInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssFundsMigratorInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssFundsMigratorInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssFundsMigratorInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssFundsMigratorInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TssFundsMigrator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainNonces.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainNonces) > 0 {
		for iNdEx := len(m.ChainNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingNonces) > 0 {
		for iNdEx := len(m.PendingNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingNoncesByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingNoncesByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingNoncesByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingNoncesByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingNoncesByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingNoncesByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingNonces.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TSS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BitcoinChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BitcoinChainId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Btc) > 0 {
		i -= len(m.Btc)
		copy(dAtA[i:], m.Btc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Btc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Eth) > 0 {
		i -= len(m.Eth)
		copy(dAtA[i:], m.Eth)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Eth)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BitcoinChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BitcoinChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.FinalizedZetaHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FinalizedZetaHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Btc) > 0 {
		i -= len(m.Btc)
		copy(dAtA[i:], m.Btc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Btc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Eth) > 0 {
		i -= len(m.Eth)
		copy(dAtA[i:], m.Eth)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Eth)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TssList) > 0 {
		for iNdEx := len(m.TssList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TssList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHasVotedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasVotedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasVotedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHasVotedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasVotedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasVotedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasVoted {
		i--
		if m.HasVoted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BallotStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BallotStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.ObservationType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ObservationType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObserverSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserverSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserverSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryObserverSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserverSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserverSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Observers) > 0 {
		for iNdEx := len(m.Observers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Observers[iNdEx])
			copy(dAtA[i:], m.Observers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Observers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChains) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsForChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsForChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsForChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsForChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsForChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsForChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainParams != nil {
		{
			size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetChainParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainParams != nil {
		{
			size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeAccount != nil {
		{
			size, err := m.NodeAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeAccount) > 0 {
		for iNdEx := len(m.NodeAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainFlagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainFlagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainFlagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrosschainFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetKeygenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeygenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeygenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keygen != nil {
		{
			size, err := m.Keygen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowObserverCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowObserverCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowObserverCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryShowObserverCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowObserverCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowObserverCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastObserverCount != nil {
		{
			size, err := m.LastObserverCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlameByIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlameByIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlameByIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlameIdentifier) > 0 {
		i -= len(m.BlameIdentifier)
		copy(dAtA[i:], m.BlameIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlameIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlameByIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlameByIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlameByIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlameInfo != nil {
		{
			size, err := m.BlameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlameRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlameRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlameRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlameRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlameRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlameRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlameInfo) > 0 {
		for iNdEx := len(m.BlameInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlameInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlameByChainAndNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlameByChainAndNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlameByChainAndNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlameByChainAndNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlameByChainAndNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlameByChainAndNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlameInfo) > 0 {
		for iNdEx := len(m.BlameInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlameInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTssFundsMigratorInfoAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTssFundsMigratorInfoAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TssFundsMigrators) > 0 {
		for _, e := range m.TssFundsMigrators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTssFundsMigratorInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryTssFundsMigratorInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TssFundsMigrator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainNonces.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainNonces) > 0 {
		for _, e := range m.ChainNonces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingNonces) > 0 {
		for _, e := range m.PendingNonces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingNoncesByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryPendingNoncesByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingNonces.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTSSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTSSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TSS.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTssAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BitcoinChainId != 0 {
		n += 1 + sovQuery(uint64(m.BitcoinChainId))
	}
	return n
}

func (m *QueryGetTssAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Eth)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Btc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTssAddressByFinalizedHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalizedZetaHeight != 0 {
		n += 1 + sovQuery(uint64(m.FinalizedZetaHeight))
	}
	if m.BitcoinChainId != 0 {
		n += 1 + sovQuery(uint64(m.BitcoinChainId))
	}
	return n
}

func (m *QueryGetTssAddressByFinalizedHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Eth)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Btc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTssHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTssHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TssList) > 0 {
		for _, e := range m.TssList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHasVotedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHasVotedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasVoted {
		n += 2
	}
	return n
}

func (m *QueryBallotByIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBallotByIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Voters) > 0 {
		for _, e := range m.Voters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ObservationType != 0 {
		n += 1 + sovQuery(uint64(m.ObservationType))
	}
	if m.BallotStatus != 0 {
		n += 1 + sovQuery(uint64(m.BallotStatus))
	}
	return n
}

func (m *QueryObserverSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryObserverSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Observers) > 0 {
		for _, s := range m.Observers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySupportedChains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySupportedChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetChainParamsForChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetChainParamsForChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainParams != nil {
		l = m.ChainParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetChainParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainParams != nil {
		l = m.ChainParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeAccount != nil {
		l = m.NodeAccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAccount) > 0 {
		for _, e := range m.NodeAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainFlagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCrosschainFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrosschainFlags.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetKeygenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keygen != nil {
		l = m.Keygen.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowObserverCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryShowObserverCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObserverCount != nil {
		l = m.LastObserverCount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlameByIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlameIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlameByIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlameInfo != nil {
		l = m.BlameInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlameRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlameRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlameInfo) > 0 {
		for _, e := range m.BlameInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlameByChainAndNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryBlameByChainAndNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlameInfo) > 0 {
		for _, e := range m.BlameInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTssFundsMigratorInfoAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssFundsMigratorInfoAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssFundsMigrators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssFundsMigrators = append(m.TssFundsMigrators, TssFundMigratorInfo{})
			if err := m.TssFundsMigrators[len(m.TssFundsMigrators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssFundsMigratorInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssFundsMigratorInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssFundsMigratorInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssFundsMigrator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TssFundsMigrator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNonces = append(m.ChainNonces, ChainNonces{})
			if err := m.ChainNonces[len(m.ChainNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingNonces = append(m.PendingNonces, PendingNonces{})
			if err := m.PendingNonces[len(m.PendingNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingNoncesByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingNoncesByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingNoncesByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TSS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinChainId", wireType)
			}
			m.BitcoinChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitcoinChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Btc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Btc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressByFinalizedHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedZetaHeight", wireType)
			}
			m.FinalizedZetaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedZetaHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinChainId", wireType)
			}
			m.BitcoinChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitcoinChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTssAddressByFinalizedHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTssAddressByFinalizedHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Btc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Btc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssList = append(m.TssList, TSS{})
			if err := m.TssList[len(m.TssList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasVotedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasVotedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasVotedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasVotedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasVotedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasVotedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasVoted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasVoted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, VoterList{})
			if err := m.Voters[len(m.Voters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationType", wireType)
			}
			m.ObservationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservationType |= ObservationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotStatus", wireType)
			}
			m.BallotStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallotStatus |= BallotStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserverSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserverSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserverSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserverSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserverSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserverSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Observers = append(m.Observers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChains) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChains: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChains: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, chains.Chain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsForChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsForChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsForChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParams == nil {
				m.ChainParams = &ChainParams{}
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParams == nil {
				m.ChainParams = &ChainParamsList{}
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAccount == nil {
				m.NodeAccount = &NodeAccount{}
			}
			if err := m.NodeAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccount = append(m.NodeAccount, &NodeAccount{})
			if err := m.NodeAccount[len(m.NodeAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainFlagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainFlagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainFlagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeygenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keygen == nil {
				m.Keygen = &Keygen{}
			}
			if err := m.Keygen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowObserverCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowObserverCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowObserverCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowObserverCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowObserverCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowObserverCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObserverCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastObserverCount == nil {
				m.LastObserverCount = &LastObserverCount{}
			}
			if err := m.LastObserverCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlameByIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlameByIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlameByIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlameByIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlameByIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlameByIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlameInfo == nil {
				m.BlameInfo = &Blame{}
			}
			if err := m.BlameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlameRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlameRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlameRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlameRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlameRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlameRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameInfo = append(m.BlameInfo, Blame{})
			if err := m.BlameInfo[len(m.BlameInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlameByChainAndNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlameByChainAndNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlameByChainAndNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlameByChainAndNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlameByChainAndNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlameByChainAndNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameInfo = append(m.BlameInfo, &Blame{})
			if err := m.BlameInfo[len(m.BlameInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
