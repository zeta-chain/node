// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tlb "github.com/tonkeeper/tongo/tlb"

	ton "github.com/tonkeeper/tongo/ton"
)

// SignerLiteClient is an autogenerated mock type for the LiteClient type
type SignerLiteClient struct {
	mock.Mock
}

// GetAccountState provides a mock function with given fields: ctx, accountID
func (_m *SignerLiteClient) GetAccountState(ctx context.Context, accountID ton.AccountID) (tlb.ShardAccount, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountState")
	}

	var r0 tlb.ShardAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ton.AccountID) (tlb.ShardAccount, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ton.AccountID) tlb.ShardAccount); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(tlb.ShardAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ton.AccountID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsSince provides a mock function with given fields: ctx, acc, lt, hash
func (_m *SignerLiteClient) GetTransactionsSince(ctx context.Context, acc ton.AccountID, lt uint64, hash ton.Bits256) ([]ton.Transaction, error) {
	ret := _m.Called(ctx, acc, lt, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsSince")
	}

	var r0 []ton.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ton.AccountID, uint64, ton.Bits256) ([]ton.Transaction, error)); ok {
		return rf(ctx, acc, lt, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ton.AccountID, uint64, ton.Bits256) []ton.Transaction); ok {
		r0 = rf(ctx, acc, lt, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ton.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ton.AccountID, uint64, ton.Bits256) error); ok {
		r1 = rf(ctx, acc, lt, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, payload
func (_m *SignerLiteClient) SendMessage(ctx context.Context, payload []byte) (uint32, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (uint32, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) uint32); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignerLiteClient creates a new instance of SignerLiteClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignerLiteClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignerLiteClient {
	mock := &SignerLiteClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
